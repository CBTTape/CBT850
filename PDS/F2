./ ADD NAME=$$$$$DOC 0125-91017-91070-1453-00312-00046-00000-*-ESG-*
             INTRODUCTION TO THE ESG SECURITY SYSTEM

                          (This documentation was prepared by
                           Sam Golob.
                           Please address questions to the author:
                              Craig Yasuna, (908) 549-4821   )

      The ESG Security System is a RACF-like interface to the MVS SAF
facility.  RACF Version 1.7 facilities are emulated, except for the
RACF database.  Two tables, the USERID and PROFILE tables, are kept in
storage.  The actual security verifications are made by the ICHRTX00
exit, using these two tables.  The formats of these USERID and PROFILE
tables are compatible with RACF database entry data.

      In this package, the USERID table is often called the "UDATA"
table, and the PROFILE table is called the "PDATA" table.

      The main practical difference between the effect of this
product and of "IBM RACF" on your system is that with this system,
users cannot change their passwords or their profiles.  The change is
done easily by an administrator.  After a table change (through ISPF
Edit), a PROC is started to refresh either the user table or the
profile table in core.  The administrator does not need to be trained
much, because the system structure is quite simple to maintain, once
it has been set up initially.

      Protection is achieved by routing all operating system or vendor
product security calls (including RACDEF, RACINIT, and RACHECK)
through an ICHRTX00 RACROUTE interface.  ICHRTX00 contains the real
verification code.  The ESG Security System is designed to force "one
point of handling" for all security calls.  ICHRTX00 processes the
various kinds of security calls in a standard way that is (mostly)
documented by IBM.  ICHRTX00 refers to the installation-coded user and
profile in-core tables, to make its judgments.  These in-core user and
resource tables are each reloadable at any time by the execution of
their special started tasks.

      The ESG Security "one point of handling" design, allows for more
complete control of the total data center environment.


INSTALLATION.

      Installation is achieved through assembling and linkediting the
CJYR---- assembler programs, the SVC 130, 131, and 133 programs, and
ICHRTX00.  Please reference the member $PARMS to see assembly and
linkedit parms.  The SVC 130, 131, and 133 programs need not be placed
in LPALIB.  They, and ICHRTX00, are linkedited into load module
CJYRINIT.  (Leave assembly of CJYRINIT for last.)  At security
initialization time, the SVCs and ICHRTX00 are dynamically copied into
getmained CSA.  (For this reason, any code changes to these modules
are not allowed to contain relocatable ADCONs whose values are not
determined at assembly time.)

      All programs may reside in a LINKLIST library, and should be
authorized.  To complete the installation, 3 procedures should be
cataloged:  CJYRINIT, CJYRUIDS, and CJYRPROF.  Samples are found in
this library as members:  #JYRINIT, #JYRUIDS, and #JYRPROF.  The
CJYRINIT procedure does not have to be used.  It need only be used if
the IEFSSN-- member of SYS1.PARMLIB is not updated with the subsystem
entry:  SEC,CJYRINIT    (see member IEFSSN00 in this library).  That
subsystem entry will initialize the presence of security in the
system, awaiting the execution of the other two procedures.

      If it is desired to initialize the security system as fast as
possible, the procedures CJYRUIDS and CJYRPROF may be executed in
SYS1.PARMLIB member IEACMD00, with ,SUB=MSTR.  Care must then be taken,
that the datasets pointed to by the INPUT ddnames be CATALOGED IN THE
MASTER CATALOG, so that they may be found.

      Before the procedures:  CJYRUIDS and CJYRPROF are executed,
ICHRTX00 will issue warning messages (but no access denials) for every
attempted dataset open.  This should flood the console somewhat.
These messages have been provided so that you can properly plan your
profile and userid table entries, especially as concerns dataset
access.  After the UDATA and PDATA tables have been initialized, these
messages will stop.

      A valid SYS1.UADS entry must be present for every TSO userid
to be used.  CICS users are defined by the security USERID table only.
The CICS signon table should be coded with only a default entry (see
our sample).  Members DFHPCT, DFHSIT, and DFHSNT in this library
describe sample settings for these respective CICS tables.  When
security is present, passwords coded in UADS will not be used, but the
ones in UDATA will be used.

      Please note that when MVS is informed that "security" is present
on the system, ALL PREVIOUSLY DEFINED PASSWORDS, INCLUDING VSAM
PASSWORDS, ARE IGNORED.  Any password protection must be reinstated by
the security system.  Evidently, the MVS designers wanted any
passwords designated by security, not to be interfered with by any
other password mechanisms in MVS.

      Be informed that the two "RACF" fields on the right side of the
TSO Logon screen, NEW PASSWORD and GROUP IDENT, are ignored by the
ESG Security System.  Also please note that in this version of the ESG
Security System, the RCVT is initialized as RACF Version 1.7, and this
should not be changed.


SETTING UP AND ENABLING THE USERID AND PROFILE TABLES.

      The way that protection will work on your system is entirely
up to your control.  Protection depends completely on the way you code
the USERID and PROFILE Data Tables.  ESG Security utilizes these
tables for its protection decisions, instead of using a RACF Database.
Sample tables have been provided.  These MUST NOT be used in your
installation as they are.  They have been made large enough to
(hopefully) help you code your own tables, but they are only examples.

      In order for both the UDATA and PDATA tables to be valid, THEY
MUST BE IN SORT ORDER.  Under ISPF Edit, the command "SORT 1 72", or
"SORT" is adequate to sort the records correctly (if they were coded
properly in the first place).  Sort errors will inhibit initialization
of the tables and will generate nasty error messages.

      In the PDATA table, DEFAULT, OR "UNIVERSAL" ACCESS FOR ANY
FACILITY OR DATASET MUST BE CODED before any specific access is coded.
You code a universal access entry in the PDATA table by leaving the
user group field blank.  Then you code other entries for the same
facility, specifying different settings for each user group that will
have special access (or denial of access) to that facility.

      Generally, only those features included in "IBM RACF Version 1.7"
have been emulated.

      The author of this system has referred to two RACF Manuals
during his planning.  It is important for all users of this package to
obtain these manuals also.  These are needed in the security
administration, which will be ongoing.

The two manuals are:


      SPL RACF           -   Referred to for information how to write
       (SC28-1343)           macros and return codes.

      RACF Administrator's Guide  -  Has an overview of profiles that
       (SC28-1340)                   should be used, and their
                                     structure.


      It is necessary to consult the RACF Administrator's Guide to
understand the reason for some of the special facility names in the
PDATA table, what they mean, and how to use them.  Some of these
special names are:  "FACILITY" (with particular dataset-like special
keywords, such as IEAABD.DMPAUTH, STGADMIN.*, or IEC.TAPERING, etc.),
and PROPCNTL (which suppresses userid propagation).  It is really
necessary to study the manual in order to control many parts of system
protection properly.  One need also study the manual to understand
APPL security.

      An example of the USERID table may be found in the member,
CJYUDATA.  An example of the PROFILE table may be found in the member,
CJYPDATA.  It is hoped that enough data is provided in these examples
to give a working knowledge for further coding and setting up.

      Please be informed that IN CORE, THESE TABLES WILL BE READ FROM
THE BOTTOM UPWARDS.


      USERDATA is coded as follows:

  Cols   1 -  8         USERID (TSO, CICS, or whatever application)
  Cols  10 - 17         User Group   (Installation defined)
  Col   18              Asterisk '*' to denote that multiple user
                         groups exist for this userid.
                         Otherwise blank.
  Cols  19 - 26         Password
  Col   28              Operation Authority  (Y or N)   If "Y", then
                         access is always granted to this user unless
                         it is denied explicitly.
  Col   31 - 50         Comment field (ignored by ESG Security but
                         used by "IBM RACF").
  Cols  51 - 80         Ignored


      PROFILE DATA is coded as follows:

  Cols   1 -  8         Facility title: (APPL, DASDVOL, DATASET, etc.)
                         See the RACF Administrator's Guide.  You
                         need to know the different facility types
                         used by the operating system, CICS, TP
                         products, and vendor products.
  Cols   9 - 52         Dataset Name, or Generic Name, or Name to be
                         protected.  (Generics are achieved using
                         the asterisk '*'.  See the examples.)
  Cols  53 - 60         User Group Id  (Installation defined)
                         Blanks in this field denote universal access
                         rules for this resource.
  Cols  61 - 66         Permission Level (NONE, READ, UPDATE, ALTER)
  Cols  67 - 72         Blank


      I must reemphasize that your security protection is completely
dependent on how you code these tables.  Please get most of your
knowledge from the RACF Administrator's Guide.

MORE REMARKS.

      In order for CICS users and transactions to be protected,
entries need to be made in the SIT, PCT, and SNT tables.  See the
included DFH--- members, and refer to the appropriate CICS manuals.
Basically, the parameter "EXTSEC=YES" (meaning that external security
is turned on) has to be coded in these entries.  The CICS Signon Table
should only contain one default entry.  All users will be granted
admission or denial through the security system's UDATA table.  In our
PDATA member, the proper FACILITY NAME has to be used for each
transaction protected under CICS.  Our sample facility name is
TD1XXTRN, which was set up in the SIT's XTRAN parameter as
XTRAN=D1XXTRN.  (See our sample member DFHSIT.  CICS itself supplies
the initial "T" in the facility name.)

      To protect other products, they must have an interface to the
security system.  For example, a PANVALET exit was used to regulate
access to PANVALET library members.  This exit may be obtained as a
sample exit from Pansophic Systems, the vendor for the Panvalet
product.  The name of their sample is "PVRACF".

      I have to say a word about userids in the UDATA table that were
set up with MULTIPLE GROUP ENTRIES.  These will get the highest
authority for all protected objects in all the groups.  As a practical
example, multiple groups are used for managers who oversee the work of
several programming groups.  The multiple group arrangement gives these
managers access to everything done by all the groups under them.

      Batch jobs and STCs are controlled as follows:  All batch jobs
default to a userid of PROD and a user group of PRDGROUP.  Started
tasks are forced a userid of STC and a user group of STCGROUP.  This
default is imposed by ICHRTX00.  Any job that has no userid connected
to it is assigned a userid of PROD and a user group of PRDGROUP by
ICHRTX00.  That situation is true for jobs submitted by RJE, by NJE,
or by a local (card) reader.  The specific authority of PRDGROUP and
STCGROUP is controlled by the PDATA table.

      Upon initial setup of the security system, PRDGROUP can be given
rather broad powers.  According to the default coding of ICHRTX00,
PRDGROUP is given Operations Authority, which means that any resource
NOT SPECIFICALLY EXCLUDED, is granted to PRDGROUP.  (Operations
authority may be taken away from PRDGROUP by a simple coding change.
Find label PRODUID in ICHRTX00.  Change the last C'Y' to C'N'.)

      The security system AS DELIVERED, does the following.  All STC's
themselves have a userid of STC, Operations Authority, and any powers
granted to STCGROUP in the PDATA member.  However, the PDATA member
(as delivered) has a special entry of "PROPCNTL STC".  This entry has
the effect of suppressing userid propagation of the userid "STC" from
any job that a started task submits.  The job submitted by a started
task then has NO USERID attached to it.  But ICHRTX00 goes and assigns
all jobs with NO USERID, a default userid of PROD and a default user
group of PRDGROUP (as we have stated).  So STC's will have different
authority than the jobs they submit.  This can be regulated as the
installation desires, usually by granting STC's more authority than
production jobs.

      That is the state of affairs if the default arrangement is
followed.  A suggestion for shops who want to better regulate batch
jobs has been advanced by IBM itself.  It will work under the ESG
Security System, because the ESG Security System follows IBM
specifications, and uses the documented SAF interface faithfully.

      The installation (after initial install) may later choose to do
the following:  Turn off Operations Authority from PROD in ICHRTX00
(as described above).  In PDATA, give the PRDGROUP very little power.
Then, require all batch jobs to use the "USER=" and "PASSWORD="
parameters in the JOB card.  This has to be planned carefully.
Perhaps, one initial userid, with the same power as the PROD userid
used to have, could be assigned.  In any case, appropriate userids and
user groups must already be in place in the PDATA member, to immediately
handle protection of the regulated batch jobs.

      Then, the installation can plan to split the jobs into more
user groups with separate userids that are more finely regulated.
Perhaps at first, Operations Authority could be granted to these batch
userids.  That extra margin of authority might later be taken away
after their requirements have been further refined and evaluated.


FURTHER COMMENTS.  EASE OF CONVERSION TO IBM RACF.

      I want to tell you that this product can be used as a precursor
to "IBM RACF" installation.  By itself, this product is perfectly
adequate for many shops.  However, a shop where this product was
running was converted to IBM RACF, and the tables were compatible.
The following was done:

      In the PDATA member:

  ADDSD   was done for cards denoting "universal access" for DATASETs.
  PERMIT  was done for cards denoting  special access    for DATASETs.
  RDEFINE was done for cards referencing a FACILITY other than datasets.
  PERMIT  was done for cards denoting  special access    for facilities
      other than datasets.

      Only minor format changes to the PDATA card images were
necessary, to put them into a form that was runnable in a CLIST.

      In the UDATA member:

  ADDUSER was done for cards denoting any user.
  CONNECT was done for cards denoting multiple group membership for
      one user.

      Only minor format changes to the UDATA card images were
necessary, to put them into a form that was runnable in a CLIST.

      A small RACF exit had to be written to allow preassignment of
userids and passwords for batch jobs, NJEs and RJEs.

      For more help, please refer to the RACF Administrator's Guide.

      Good luck.
./ ADD NAME=$$$$CUST 0200-11093-11093-0000-00087-00087-00000-*RAKF*
                   RAKF 1.2.0 Customization Instructions
                   =====================================

This document describes the steps to customize and activate RAKF 1.2.0
after the basic SMP4 installation has been completed.

1. Allocate a PDS named SYS1.SECURE.CNTL (LRECL=80). This PDS will
   contain 2 members:

   o USERS:    The RAKF users table
   o PROFILES: The RAKF profiles table

   If you've already allocated this library in an earlier version of
   RAKF you can continue to use it. The name of the library has to be
   SYS1.SECURE.CNTL. Although it could be changed this has to be done
   in several locations and will for the sake of simplicity not be outlined
   in these instructions.

2. If you're a first time RAKF user copy the following members from
   HLQ.SAMPLIB to SYS1.SECURE.CNTL:

   o MINUSR using a new name of USERS
   o MINPRF using a new name of PROFILES

   This establishes a minimal configuration equivalent to an unprotected
   system with IBMUSER being defined as the only user. IBMUSER has
   operations priviledge allowing all accesses.

   If you are running Volker's TK3 (Turnkey MVS) system you can use
   TK3USR instead of MINUSR which defines besides IBMUSER also the
   users HERC01, HERC02, HERC03 and HERC04 with equivalent attributes
   as they are defined in UADS. Note, however, that RAKF doesn't allow
   users having no password. For this reason IBMUSER, HERC01 and HERC03
   have a password of NONE defined instead of no password as in TK3.

   Note that each TSO user still needs an UADS entry to define the TSO
   authorizations JCL, MOUNT, OPER and ACCOUNT. These are not covered
   by RAKF's users table.

3. Issue the command

   S RAKF

   at the MVS console and reply YES to message RAKF002A. Verify that
   the profiles and users tables initialize correctly and that you can
   logon using the usernames and passwords from SYS1.SECURE.CNTL(USERS).

   Note Although the RAKF procedure loads the in-core users and profiles tables
   ==== it is not primarily intended to be used for that purpose during normal
        operations. To routinely update the profiles or user table to activate
        changes the procedures RAKFPROF or RAKFUSER should be used as outlined
        in $$$$$DOC (this document is the unmodified "INTRODUCTION TO THE ESC
        SECURITY SYSTEM" dated 1991 where these procedures are called CJYRPROF
        and CJYRUIDS, respectively).

        The main purpose of the RAKF procedure is to provide a means to activate
        RAKF if initialization didn't take place automatically at IPL time, for
        example during installation and customization. If the RAKF procedure is
        run when RAKF had been activated already it will skip the initialization
        and refresh the in-core users and profile table, which is equivalent to
        running RAKFPROF and RAKFUSER.

4. To enable automatic initialization of RAKF at system IPL time
   (highly recommended!) MSTRJCL needs to be modified to contain DD
   statements pointing to the users and profiles tables:

   //RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),
   //            DISP=SHR
   //RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),
   //            DISP=SHR

   Member ZJW0003 of HLQ.SAMPLIB provides a sample USERMOD accomplishing this.
   If ZJW0003 fits your system just submit it. If not use any other
   method of your choice to add the required DD cards.

5. Edit SYS1.PARMLIB(RAKFINIT) and change the value NO in line 1 to ASK.
   Then reIPL the system. Message RAKF002A will now be issued immediately
   after master scheduler initialization and give you the choice to start
   RAKF or not.

6. Start now modifying your USERS and PROFILES tables until the desired
   level of protection is reached. Please read also member $$$$M38J for
   additional considerations.

7. Once you're satisfied with your configuration change line 1 in
   SYS1.PARMLIB(RAKFINIT) from ASK to YES which will cause RAKF to be
   activated unconditionally during IPL.
./ ADD NAME=$$$$INFO 0200-11093-11093-0000-00113-00113-00000-*RAKF*
*
*    See members $$COPYRT and $$NOTICE in this library.
*
**********************************************************************
*                                                                    *
*    RAKF is based on the ESG Security System                        *
*    written by Craig J. Yasuna               (Mar 1991)             *
*    adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)             *
*                         Phil Roberts        (Apr 2011)             *
*                         Juergen Winkelmann  (Apr 2011)             *
*                                                                    *
**********************************************************************
*
*    The installation instructions in $$$$$DOC are not current.
*    Installation is performed through the standard SMP4 RECEIVE,
*    APPLY, ACCEPT procedure as outlined in member $$$$INST of this
*    library which is also part of the installation JCL library created
*    when running initial job RAKF12 according to the documentation
*    accompanying the distribution tape. After installation RAKF
*    is inactive. Member $$$$CUST of this library describes the
*    steps to customize and activate it.
*
*    For information on operational aspects specific to MVS 3.8j
*    refer to member $$$$M38J. It should be noted that usage of the
*    ZAPs to MVS security processing outlined in $$$$M38J should be
*    avoided by all means. They are provided as a courtesy to help
*    in cases where RACF indication of the whole system is not feasible
*    but they are not meant to be a permanent solution.
*
*    Member $$$$RMVE contains information on how to remove RAKF from
*    the system by reinstating the standard MVS versions of SVCs 130-133
*    and the ICHSEC00 initialization program. It should be noted, however,
*    that deinstalling RAKF isn't a standard procedure to be performed
*    routinely as it can lead to a total lock out from the system or
*    even to a system being no longer IPLable. The recommended way is to
*    let RAKF be installed and active and replace the profiles table
*    by the minimum table MINPRF from this library. This enables ALTER
*    access by everyone to everything and thus is equivalent to a
*    vanilla MVS system without RAKF.
*
*    For information on configuring the PROFILES and USERS tables
*    and other operational aspects of this software refer to
*    member $$$$$DOC.
*
Version History
===============

ESG Security System (March 1991):
---------------------------------
The ESG Security System was published by Craig J. Yasuna as an alternative to
IBM's RACF and similar products. It uses the ICHRTX00 security router exit to
communicate it's security decisions to MVS. ICHRTX00 is a user exit of the SAF
router ICHSFR00.

RAKF "RAcK oF" Security System (August 2005):
---------------------------------------------

RAKF was published by A. Philip Dickinson as an adaption of the ESG Security
System to MVS 3.8j. The ESG Security doesn't natively support MVS 3.8j for
several reasons. The major ones are:

o At MVS 3.8j times the SAF router ICHSFR00 was part of the RACF product and
  thus not a available on MVS systems without RACF being installed. So the
  ICHRTX00 exit as a convenient place for third party security products to hook
  into the SAF didn't exist.

o incompatible ACEE handling.

o The ESG Security System uses the BAS instruction which is not available
  in S/370.

o ESG Security's 24/31 bit AMODE handling wasn't compatible with the usage of
  high order address bytes for flags in MVS 3.8j.

o incompatible parameter lists of RACROUTE, RACDEF, RACHECK and RACINIT.

o handling of in core profiles incompatible with MVS's VSAM catalog management.

Phil D. converted ESG Security's ICHRTX00 router exit into an ICHSFR00 SAF
router to overcome the first major incompatibility. He also solved the next two
points and in parts the 24/31 bit AMODE issues. The rest remained undetected
when he published his work and caused several problems when using RAKF on
MVS 3.8j:

o Arbitrary 0C4 abends during RACINIT and RACDEF processing. The most
  severe of these abends is the "initiator blowout" mentioned in
  http://tech.groups.yahoo.com/group/H390-MVS/message/10015.

o Arbitrary 0C4 abends and FREEMAIN errors during RACHECK processing
  of VSAM catalogs and objects. These problems are discussed in
  http://tech.groups.yahoo.com/group/H390-MVS/message/11811.

o Arbitrary invalid authorization decisions: Access denied if it
  should have been granted and access granted if it should have been
  denied. The latter in a way that with some trial and error any user
  is able to acquire ALTER access to any dataset in the system.

RAKF 1.2.0 (April 2011):
------------------------

When the above mentioned problems became visible and identified as being
RAKF caused in several MVS 3.8j environments it turned out that Phil D's RAKF
source wasn't accessible any more (lost in a package crate from moving). Phil
Roberts ("halfmeg") stepped in and reconstructed the source by disassembling
Phil D's binary RAKF distribution and comparing it with the original source of
the ESG Security System. Based on that reconstructed source the rest of the
incompatibilities listed above were identified and corrected by Juergen
Winkelmann.

To avoid another loss of the source to occur an additional effort has been made
to clean up the source to a publishable state and to provide an SMP4 compatible
source distribution enabling RAKF installation through the well known SMP 4
standard RECEIVE, APPLY, ACCEPT procedure.
./ ADD NAME=$$$$INST 0200-11093-11093-0000-00077-00077-00000-*RAKF*
                    RAKF 1.2.0 Installation Instructions
                    ====================================

This document describes the steps to install RAKF 1.2.0.

The installation is performed through the standard SMP RECEIVE, APPLY and
ACCEPT procedure. The process has been tested with SMP level 04.48 which
is the level provided by the Turnkey 3 MVS system. This presumably is equivalent
to having PTFs UR13349, UR15994, UR17644 and UR19590 applied. Tests have
shown that APPLY processing doesn't work reliably at lower levels: For
example at level 04.44 APPLY doesn't assemble and link all modules. So
before starting please update your SMP as close to level 04.48 as possible.

1. Edit jobs A@PREP, C@APPLY and D@ACCPT:

   o change all occurances of HLQ to the desired high level qualifier
     for the RAKF libraries, e.g. RAKF, RAKF.V1R2M0, etc. Please note
     that HLQs where HLQ.SAMPLIB, HLQ.ASAMPLIB, HLQ.APROCLIB, HLQ.APARMLIB
     HLQ.MACLIB, HLQ.AMACLIB, HLQ.SRCLIB or HLQ.ASRCLIB already exist
     are not recommended.
   o change all occurances of dddddd to the desired volume for the
     RAKF distribution libraries.
   o change all occurances of ssssss to the desired volume for the
     RAKF target libraries.
   o change all occurances of tttt to the device type and all occurances
     of rrrrrr to the volume of the sysres device where SYS1.LPALIB and
     SYS1.LINKLIB of the system reside on which RAKF is to be installed.
     (If you are running TK3 MVS and install on your current system the
     device type is 3350 and the volume is MVSRES.)

   Verify that in jobs C@APPLY and D@ACCPT the sequence of the SYSLIB and
   the target and distribution library DD statements matches your
   SMPAPP and SMPACC procedures. The jobs have been tested with the
   SMP procedures as defined in Volker's MVS TK3 system. If the sequence
   of DD statements in the SMP procedures in your system doesn't match
   the sequence of the overriding DD statements in C@APPLY and D@ACCPT
   RAKF elements may erroneously be placed in SYS1.ASAMPLIB, SYS1.SAMPLIB,
   SYS1.APROCLIB, SYS1.APARMLIB, SYS1.AMACLIB or SYS1.MACLIB instead of
   their HLQ.xxxxLIB counterparts.

2. Submit job A@PREP. This job performs the following actions to prepare
   your system for RAKF 1.2.0 installation:

   o Delete MODs and LMODs that are defined in MVS 3.8j as placeholders for
     RACF modules from SMP's target and distribution zones.
   o Delete the placeholder modules as well as potentialy installed
     pre RAKF 1.2.0 modules from SYS1.LINKLIB and SYS1.LPALIB.
   o Allocate RAKF 1.2.0 target and distribution libraries.

3. Receive RAKF by submitting job B@RECV. Be prepared to mount the RAKF
   distribution tape rakf12.aws after submitting the job.

4. Apply RAKF by submitting job C@APPLY.

5. Accept RAKF by submitting job D@ACCPT. This step can be skipped if
   you don't want to accept the sysmod now. It is, however, strongly
   recommended to accept it as only then it will be possible to "test
   drive" updates that might be published later and to return to the
   previous state in case of problems.

6. Perform an IPL CLPA of your system. The system will come up with all
   RAKF elements installed but without activating RAKF. Successful
   installation can be verified from the RAKF banner being displayed
   at the beginning of the IPL and by checking the system's SVC table
   for example using menu option T in IMON and scroll forward to the
   RACF SVCs (130 - 133) which should show entries like this:

   130 82 00EAEB30 3/4        RACHECK    -RACF IGC00130 RAKF  mm/dd/yy
   131 83 00EAEB52 3/4 YES    RACINIT    -RACF IGC0013A RAKF  mm/dd/yy
   132 84 00EAEB74 3/4 YES    RACLIST    -RACF ICHRIN00 DUMMY mm/dd/yy
   133 85 00EAEB9A 3/4 YES    RACDEF     -RACF IGC0013C RAKF  mm/dd/yy

   where mm/dd/yy is RAKF's installation date.

7. Consult member $$$$CUST in HLQ.SAMPLIB for information on how
   to customize and activate RAKF and member $$$$INFO for various
   other aspects around RAKF usage and background informations.
./ ADD NAME=$$$$M38J 0200-11093-11093-0000-00158-00158-00000-*RAKF*
              RAKF 1.2.0 Usage Considerations for MVS 3.8j
              ============================================

The implementation of calls to the security system in MVS 3.8j to
protect datasets greatly relies on the concept of indication: Only
datasets having their "RACF indicator" set on are reliably protected.
The RACF indicator is a bit in the type 1 DSCB of a none VSAM dataset
or in the catalog entry of a VSAM object. Once activated RAKF ensures
that all newly created datasets, catalogs and VSAM objects have their
RACF indicator turned on. But this is typically not the case for
already existing ones. So it is strongly recommended to manually
turn the RACF indicator on for all datasets, catalogs and VSAM objects
that already existed before RAKF activation. It should also be noted
that once the whole system is RAKF protected (i.e. the RACF indicator
is on for all datasets, catalogs and VSAM objects) it is no longer
feasible to run it without RAKF being active as most accesses will then
be denied.

First time users of RAKF might have a problem instantly RACF indicating
all datasets in the system. Also there might be users needing to protect
only none VSAM datasets (i.e. don't need catalog and/or VSAM object
protection). For those users a set of ZAPs to the MVS modules handling
none VSAM datasets is provided that enforce calls to RAKF for all none
VSAM datasets, not only for those with RACF indicator turned on. So the
easiest way to get some basic protection on the system is to simply
install RAKF together with the MVS ZAPs and you're all set.

It should be noted, however, that this constitutes a massive change of logic
flow in the modules ZAPed. There exist complex interactions between VSAM
catalog management and the DADSM functions modified by the ZAPs. So, while
intensive testing has shown that these ZAPs together with correctly defined RAKF
DATASET and DASDVOL profiles provide reliable protection for none VSAM datasets,
they partly break VSAM catalog management. An artefact of this situation is
that with applied ZAPs an IDCAMS "DELETE CLUSTER" command of a VSAM cluster that
hasn't been allocated with the SUBAL option ends with CC=0 but leaves the data
and index dataspaces of this cluster orphaned on disk. Phil Roberts has found
a workaround which allows to delete these orphaned VSAM components from disk
which is cited here to help in case this problem occured:

Phil wrote:

"I have tinkered some and have a work around for the situation where a
VSAM dataset may get orphaned due to a mixed environment. It doesn't
take any outside utilities.

Basically if a VSAM cluster is deleted while running with the MVSZAPs
(not recommened operation but perhaps necessary for some) one can:

- DELETE hlq.vsam.name NOSCR
- CDSCB hlq.vsam.name.data DSORG(PS) VOL(xxxxxx) RACF
- CDSCB hlq.vsam.name.index DSORG(PS) VOL(xxxxxx) RACF
- RPF 3.4 with hlq and VOL xxxxxx to C CATALOG then D to delete the
  orphaned components from pack xxxxxx"

This example illustrates why it is strongly recommended to use the
MVS ZAPs only temporary, during a phase while working to RACF indicate
the whole system, and to remove them as soon as possible.

The following table gives an overview on the influence of the ZAPs in a few
scenarios and should help to decide whether to use them or not:

                                     -------------------------------------
                                     ! All datasets  !                   !
                                     ! VSAM objects  ! System has mixed  !
                                     ! and catalogs  ! indication status !
                                     ! are indicated !                   !
                                     !---------------!-------------------!
                                     !       !       !  VSAM  !  NVSAM   !
                                     !       !       !-------------------!
                                     ! VSAM  ! NVSAM !  i ! n !  i ! n   !
                                     !       !       !  n ! o !  n ! o   !
                                     !       !       !  d ! t !  d ! t   !
-------------------------------------!-------!-------!----!---!----!-----!
!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  Y ! Y   !
!    Z !-----------------------------!-------!-------!----!---!----!-----!
!    A ! Reliable catalog management !   N   !   Y   !  N ! N !  Y ! Y   !
!    P !-----------------------------!-------!-------!----!---!----!-----!
!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !
-------------------------------------!-------!-------!----!---!----!-----!
!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  N ! N   !
!    Z !-----------------------------!-------!-------!----!---!----!-----!
! No A ! Reliable catalog management !   Y   !   Y   !  Y ! Y !  Y ! Y   !
!    P !-----------------------------!-------!-------!----!---!----!-----!
!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !
--------------------------------------------------------------------------

It should be noted that in a mixed environment without ZAPs even indicated
none VSAM datasets aren't reliably protected, that's not a typo! The table
shows clearly that one should by all means try to reach the "not ZAPed and
fully indicated" configuration because this is the only one to provide full
protection without introducing risky changes to basic system functionality.

The following steps describe the installation and removal of the MVS ZAPs:

1. Run job LPABACK: In step 2 you'll ZAP MVS modules IFG0194A,
   IGC0002I, IGC00030 and IGG0553A. These modules are typically located
   in SYS1.LPALIB but they might also be elsewhere in LPALIST or
   LINKLIST. Job LPABACK copies these modules and their aliases to a
   backup library... just in case you want to revert to the non-ZAPed
   versions later. Find out where these modules reside on your system
   and change SYS1.LPALIB in job LPABACK to the name of that library.
   If you want to use another name for the backup library than
   RAKF.LPALIB.BACKUP then change that name too at the location
   indicated by a comment in the JCL. Then submit the job and check
   that the library has been created correctly. It should contain 4
   members and 17 aliases.

2. Run job ZAPMVS38: This job applies the MVS ZAPs. If necessary
   change the //SYSLIB DD statement to the name of the library where
   IFG0194A, IGC0002I, IGC00030 and IGG0553A reside. If module
   IFG0194A has already been ZAPed as recommended in Phil D's
   original rakf.pdf installation procedure then comment out the 6 ZAP
   statements indicated by the respective comment in the job. Run the
   job and verify that the ZAPs where successful.

   If any of the ZAPs failed your system isn't at a service level
   compatible with the ZAPs. The ZAPs were tested with the following
   PTF levels of the ZAPed modules:

   o IFG0194A PTF UZ74083
   o IGC0002I PTF UZ68267
   o IGC00030 PTF UZ63439
   o IGG0553A PTF UZ63439

   This is the level of Volker's Turnkey 3 system. If you're using
   other PTF levels most probably the ZAPs need to be reworked to
   reflect at least the correct addresses of the ZAPed instructions.

   After having run job ZAPMVS38 successfully your system is ready to
   use with RAKF 1.2.0 for basic none VSAM dataset protection.

3. Restore job LPAREST: If you want to remove the MVS ZAPs... job
   LPAREST copies the modules backed up in step 1 by job LPABACK back
   to their original locations. If you adjusted dataset names in
   LPABACK make analogous changes in LPAREST before running it. Please
   note that Phil D's original OPEN processing ZAP is still applied
   after running LPAREST if it was already applied before running
   LPABACK. So, if you want to get rid of that ZAP too which is strongly
   recommended, you need to find another source to restore IFG0194A and
   it's aliases from (hopefully you backed them up before applying Phil D's
   ZAP).

Finally it should be emphasized that although RAKF now works mostly as it is
supposed to the protection of your system is only as good as your resource
profile definitions are. Consult the RAKF 1.7 manuals for details; Phil R
has kindly scanned SPL: RACF SC28-1343-2 and posted it to the H390-MVS
Yahoo group at http://tech.groups.yahoo.com/group/H390-MVS/message/11648.
This manual provides a good insight on how RACF was supposed to work at
that time and RAKF now behaves mostly the same way. Member $$$$$DOC is a good
source of information on RAKF's ressource definition logic which is still the
same as it was with the ESG Security system.

Special attention should be given to the fact that RAKF allows ALTER
access to all undefined resources. Thus, for example, a user can delete any
dataset on any volume even if access NONE is defined for the dataset as
long as there is no DASDVOL profile defined: ALTER access to a DASD allows
scratching of any file on it regardless of the file's protection and
exactly that's what a user gets if no DASDVOL is defined.
./ ADD NAME=$$$$RMVE 0200-11093-11093-0000-00078-00078-00000-*RAKF*
                   RAKF 1.2.0 Deinstallation Instructions
                   ======================================

This document describes the steps to deinstall RAKF 1.2.0 and
reinstate native MVS security behavior.

 /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
 Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!
 \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

DEINSTALLING RAKF IS NOT RECOMMENDED!

After deinstallation RACF indicated files will no longer be
accessible. This may lead to a not IPLable or not accessible
system. Removing RAKF and reinstating native MVS security
behavior is NOT RECOMMENDED unless in preparation the RACF
indicator of all non VSAM datasets, VSAM catalogs and VSAM
objects has been turned off.

The RECOMMENDED WAY instead of deinstalling RAKF is to let it
be installed and active and replace the profiles table by the
minimum table MINPRF from this library. This enables ALTER
access by everyone to everything and thus is accesswise
equivalent to a vanilla MVS system without RAKF.

DEINSTALLING RAKF IS NOT RECOMMENDED!

 /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
 Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!
 \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

The following instructions assume that you've read the above
recommendation and understood the consequences of removing RAKF
from your system. Continue at your own risk:

1. If you've applied the MVS ZAPs using job ZAPMVS38 consult member
   $$$$M38J on how to remove these ZAPs. The ZAPs MUST be removed
   prior to deinstalling RAKF otherwise the system will not be
   accessible or will not even IPL after the deinstallation.

2. Copy members $$$$RMVE (this instruction), $$$$INST, C@APPLY,
   RAKFRMV and RAKF2MVS from your RAKF SAMPLIB to a private library.
   Work with these copies throughout the following steps as the RAKF
   libraries will be deleted! The jobs to be edited and submitted in
   the course of this procedure have been prepared under the assumption
   that the libraries to be deleted or modified can be located through
   the standard catalog search order. If this is not the case look
   thoroughly through the JCL to be sure to add VOL and/or UNIT parameters
   to the DD statements to correctly identify the libraries.

3. a) If RAKF SYSMOD TRKF120 has been APPLIed but not ACCEPTed,
      edit installation job C@APPLY:
      o change all occurances of HLQ to the high level qualifier of your
        RAKF libraries, e.g. RAKF, RAKF.V1R2M0, etc. and verify the
        correct sequence of the overiding DD statements against your
        SMPAPP procedure as described in $$$$INST.
      o change the command "APPLY S(TRKF120) DIS(WRITE)" in line 30 to
        read "RESTORE S(TRKF120) DIS(WRITE)".
      Submit changed job C@APPLY to remove all RAKF components from
      your system.

   b) If RAKF SYSMOD TRKF120 has been ACCEPTed, edit job RAKFRMV:
      o change all occurances of tttt to the device type and all occurances
        of rrrrrr to the volume of the sysres device where SYS1.LPALIB and
        SYS1.LINKLIB of the system reside from which RAKF is to be deleted.
        (If you are running TK3 MVS and delete from your current system the
        device type is 3350 and the volume is MVSRES.)
      Submit changed job RAKFRMV to remove all RAKF components from
      your system.

4. Review the DD statements pointing to SYS1.LINKLIB and SYS1.LPALIB in
   job RAKF2MVS and add VOL and/or UNIT parameters if necessary. Change
   all occurances of HLQ to the high level qualifier of your RAKF libraries.
   Submit the job which concludes the deinstallation procedure.

The system libraries as well as SMP are now reverted back to native MVS
security. Before activating this configuration through an IPL CLPA make
sure that no dataset needed for IPL is RACF indicated.
./ ADD NAME=$$COPYRT 0102-91017-91023-1151-00018-00016-00000-*-ESG-*
*
*    SEE MEMBER $$NOTICE IN THIS LIBRARY.
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
./ ADD NAME=$$NOTICE 0200-91017-11097-1847-00047-00019-00000-*RAKF*
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
*    THIS PRODUCT IS NOT "PUBLIC-DOMAIN", BUT ITS AUTHOR HAS GIVEN   *
*    PERMISSION THAT IT BE DISTRIBUTED ON THE CBT MVS MODS TAPE.     *
*                                                                    *
**********************************************************************
*
* From: Yasuna, Craig
* Sent: Thursday, April 07, 2011 6:47 PM
* To: Winkelmann Juergen
* Subject: RE: Question concerning the ESG Security System
*
* Absolutely ... I am very glad that the code still lives on and that it
* has value.
*
* THANKS!!! - Craig
*
* -----Original Message-----
* From: Winkelmann Juergen [mailto:winkelmann@id.ethz.ch]
* Sent: Thursday, April 07, 2011 12:46 PM
* To: Yasuna, Craig
* Subject: Question concerning the ESG Security System
*
* . . .
*
* Phil Roberts reconstructed Phil Dickinson's changes to the original
* ESG source through disassembly and compare. Based on that source I
* finalized Phil D's work and now have RAKF fully working on MVS 3.8j.
* I'm still in a final testing phase. After having finished this, I'd
* like to post RAKF to the H390-MVS group and also to submit the changed
* source back to CBT to avoid it getting lost again. Before doing this,
* I'd like to ask for your consent as the original author. As far as I
* understood Phil D asked for the same permission in 2005 but I don't
* want to just quietly take over from him.
*
./ ADD NAME=A@PREP   0200-11093-11093-0000-00080-00080-00000-*RAKF*
//RAKFPREP JOB (RAKF),
//             'RAKF Installation',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* Prepare system for RAKF 1.2.0 installation                        *
//*                                                                   *
//* Expected return codes: Step UCLIN:  00                            *
//*                        Step LIBS:   00                            *
//*                        Step DELETE: 08 or lower                   *
//* ------------------------------------------------------------------*
//*
//* ------------------------------------------------------------------*
//* Delete MVS stub modules from SMP                                  *
//* ------------------------------------------------------------------*
//UCLIN   EXEC SMPAPP
//SMPCNTL  DD  *
 UCLIN CDS .
  DEL SYSMOD(EBB1102) MOD(ICHRIN00) .
  DEL MOD(IEFBR14) LMOD(ICHSEC00) .
  DEL MOD(ICHRIN00) .
  DEL LMOD(ICHSEC00) .
  DEL LMOD(IGC0013{) .
 ENDUCL .
 UCLIN ACDS .
  DEL SYSMOD(EBB1102) MOD(ICHRIN00) .
  DEL MOD(ICHRIN00) .
 ENDUCL .
/*
//* ------------------------------------------------------------------*
//* Allocate target und and distribution libraries                    *
//* ------------------------------------------------------------------*
//LIBS    EXEC PGM=IEFBR14
//ASAMPLIB DD  DISP=(,CATLG),DSN=HLQ.ASAMPLIB,VOL=SER=dddddd,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),
//             SPACE=(TRK,(15,5,5))
//SAMPLIB  DD  DISP=(,CATLG),DSN=HLQ.SAMPLIB,VOL=SER=ssssss,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),
//             SPACE=(TRK,(15,5,5))
//AMACLIB  DD   DISP=(,CATLG),DSN=HLQ.AMACLIB,VOL=SER=dddddd,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),
//             SPACE=(TRK,(2,1,1))
//MACLIB   DD  DISP=(,CATLG),DSN=HLQ.MACLIB,VOL=SER=ssssss,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),
//             SPACE=(TRK,(2,1,1))
//ASRCLIB  DD  DISP=(,CATLG),DSN=HLQ.ASRCLIB,VOL=SER=dddddd,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),
//             SPACE=(TRK,(30,10,4))
//SRCLIB   DD  DISP=(,CATLG),DSN=HLQ.SRCLIB,VOL=SER=ssssss,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),
//             SPACE=(TRK,(30,10,4))
//APROCLIB DD  DISP=(,CATLG),DSN=HLQ.APROCLIB,VOL=SER=dddddd,
//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),
//             SPACE=(TRK,(2,1,1))
//APARMLIB DD  DISP=(,CATLG),DSN=HLQ.APARMLIB,VOL=SER=dddddd,
//             UNIT=SYSDA,DCB=(RECFM=F,LRECL=80,BLKSIZE=80),
//             SPACE=(TRK,(1,1,1))
//* ------------------------------------------------------------------*
//* Delete MVS stub modules and/or pre-SMP RAKF modules               *
//* from LINKLIB and LPALIB                                           *
//* ------------------------------------------------------------------*
//DELETE  EXEC PGM=IEHPROGM
//SYSPRINT DD  SYSOUT=*
//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt
//SYSIN    DD  *
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFINIT
/*
//
./ ADD NAME=B@RECV   0200-11093-11093-0000-00018-00018-00000-*RAKF*
//RAKFRECV JOB (RAKF),
//             'RAKF Installation',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* SMP receive of RAKF 1.2.0                                         *
//* Expected return code: 00                                          *
//* ------------------------------------------------------------------*
//RECEIVE EXEC SMPREC
//SMPPTFIN DD  DISP=(OLD,KEEP),DSN=TRKF120.F0,
//             UNIT=(TAPE,,DEFER),VOL=(,RETAIN,SER=RAKF12),
//             LABEL=(1,SL)
//SMPCNTL  DD  *
 RECEIVE S(TRKF120) .
/*
//
./ ADD NAME=C@APPLY  0200-11093-11093-0000-00032-00032-00000-*RAKF*
//RAKFAPLY JOB (RAKF),
//             'RAKF Installation',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* SMP apply of RAKF 1.2.0                                           *
//* Expected APPLY step return code: 04 or lower                      *
//*                                   |                               *
//*                                    --> resulting from RC=8 in SMP *
//*                                        generated LINKEDITs.       *
//*                                                                   *
//* After successful APPLY continue as outlined in member $$$$INST    *
//* of the installation JCL-Library, step 5 (Run Job D_ACCPT) to      *
//* SMP ACCEPT RAKF or step 6 (IPL CLPA) if you want to skip the      *
//* SMP ACCEPT for now.                                               *
//* ------------------------------------------------------------------*
//APPLY   EXEC SMPAPP
//SYSLIB   DD
//         DD
//         DD
//         DD
//         DD
//         DD  DISP=SHR,DSN=HLQ.MACLIB
//MACLIB   DD  DISP=SHR,DSN=HLQ.MACLIB
//SAMPLIB  DD  DISP=SHR,DSN=HLQ.SAMPLIB
//SRCLIB   DD  DISP=SHR,DSN=HLQ.SRCLIB
//SMPCNTL  DD  *
 APPLY S(TRKF120) DIS(WRITE) .
/*
//
./ ADD NAME=D@ACCPT  0200-11093-11093-0000-00028-00028-00000-*RAKF*
//RAKFACPT JOB (RAKF),
//             'RAKF Installation',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* SMP accept of RAKF 1.2.0                                          *
//* Expected return code: 00                                          *
//* ------------------------------------------------------------------*
//ACCEPT  EXEC SMPACC
//SYSLIB   DD
//         DD
//         DD
//         DD
//         DD  DISP=SHR,DSN=HLQ.AMACLIB
//AMACLIB  DD  DISP=SHR,DSN=HLQ.AMACLIB
//APARMLIB DD  DISP=SHR,DSN=HLQ.APARMLIB
//APROCLIB DD  DISP=SHR,DSN=HLQ.APROCLIB
//ASAMPLIB DD  DISP=SHR,DSN=HLQ.ASAMPLIB
//MACLIB   DD  DISP=SHR,DSN=HLQ.MACLIB
//SAMPLIB  DD  DISP=SHR,DSN=HLQ.SAMPLIB
//ASRCLIB  DD  DISP=SHR,DSN=HLQ.ASRCLIB
//SRCLIB   DD  DISP=SHR,DSN=HLQ.SRCLIB
//SMPCNTL  DD  *
 ACCEPT S(TRKF120) DIS(WRITE) .
/*
//
./ ADD NAME=LPABACK  0200-11093-11093-0000-00027-00027-00000-*RAKF*
//LPABACK  JOB (RAKF),
//             'ZAP MVS for RAKF',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=2048K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//*                                                                   *
//* Backup LPA modules to be ZAPed for RAKF installation              *
//*                                                                   *
//* !!! Caution: Refer to member $$$$M38J before running this job !!! *
//*                                                                   *
//* ------------------------------------------------------------------*
//BACKUP  EXEC PGM=IEBCOPY
//LPALIB   DD  DISP=SHR,DSN=SYS1.LPALIB  <== LPA modules to be backuped
//LPABKUP  DD  DISP=(,CATLG),SPACE=(TRK,(3,1,5)),
//             UNIT=SYSDA,DCB=*.LPALIB,
//             DSN=RAKF.LPALIB.BACKUP    <== backup copy of LPA modules
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
 COPY INDD=((LPALIB,R)),OUTDD=LPABKUP
 SELECT MEMBER=(IGC0002I,IGG0290A,IGG0300F,IGC00030,IGC0003{,          -
               IGG03001,IGG03002,IGG0553A,IGG0553F,IFG0194A,IFG0194F,  -
               IFG0194J,IFG0195G,IFG0204A,IFG0204J,IFG0554A,IFG0554C,  -
               IFG0554F,IFG0554J,IGG0190A,IGG0550P)
/*
//
./ ADD NAME=LPAREST  0200-11093-11093-0000-00022-00022-00000-*RAKF*
//LPAREST  JOB (RAKF),
//             'ZAP MVS for RAKF',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=2048K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//*                                                                   *
//* Restore LPA modules ZAPed for RAKF installation                   *
//*                                                                   *
//* !!! Caution: Refer to member $$$$M38J before running this job !!! *
//*                                                                   *
//* ------------------------------------------------------------------*
//RESTORE EXEC PGM=IEBCOPY
//LPABKUP  DD  DISP=SHR,
//             DSN=RAKF.LPALIB.BACKUP    <== Backup copy of LPA modules
//LPALIB   DD  DISP=SHR,DSN=SYS1.LPALIB  <== Modules are restored here
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
 COPY INDD=((LPABKUP,R)),OUTDD=LPALIB
/*
//
./ ADD NAME=MINPRF   0200-11093-11093-0000-00005-00005-00000-*RAKF*
DASDVOL *                                                   ALTER
DATASET *                                                   ALTER
FACILITY*                                                   ALTER
TAPEVOL *                                                   ALTER
TERMINAL*                                                   ALTER
./ ADD NAME=MINUSR   0200-11093-11093-0000-00001-00001-00000-*RAKF*
IBMUSER  ADMIN    NONE     Y
./ ADD NAME=RAKFRMV  0200-11093-11093-0000-00163-00163-00000-*RAKF*
//RAKFRMV  JOB (RAKF),
//             'RAKF Removal',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* Remove RAKF 1.2.0                                                 *
//*                                                                   *
//*   /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/     *
//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *
//*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\     *
//*                                                                   *
//*  This job is to be used for RAKF removal only if RAKF is in       *
//*  ACCEPTed state. If RAKF is APPLIed but not ACCEPTed use the      *
//*  the SMP command "RESTORE S(TRKF120)" instead of this job         *
//*  to remove it.                                                    *
//*                                                                   *
//*  After RAKF removal the system is NOT IPLable until the original  *
//*  MVS stub modules have been reinstated. Refer to job RAKF2MVS     *
//*  for reinstating these modules                                    *
//*                                                                   *
//*   /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/     *
//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *
//*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\     *
//*                                                                   *
//*                                                                   *
//* Expected return codes: Step UCLIN:    00                          *
//* Expected return codes: Step SCRATCH:  00                          *
//* ------------------------------------------------------------------*
//*
//* ------------------------------------------------------------------*
//* Remove RAKF elements from SMP                                     *
//* ------------------------------------------------------------------*
//UCLIN   EXEC SMPAPP
//SMPCNTL  DD  *
 UCLIN CDS .
  DEL LMOD(ICHRIN00) .
  DEL LMOD(ICHSEC00) .
  DEL LMOD(ICHSFR00) .
  DEL LMOD(RAKFPROF) .
  DEL LMOD(RAKFPWUP) .
  DEL LMOD(RAKFUSER) .
  DEL  MOD(CJYRCVT)  .
  DEL  MOD(ICHRIN00) .
  DEL  MOD(ICHSEC00) .
  DEL  MOD(ICHSFR00) .
  DEL  MOD(IGC0013A) .
  DEL  MOD(IGC0013C) .
  DEL  MOD(IGC00130) .
  DEL  MOD(RAKFPROF) .
  DEL  MOD(RAKFPWUP) .
  DEL  MOD(RAKFUSER) .
  DEL  SRC(CJYRCVT)  .
  DEL  SRC(ICHRIN00) .
  DEL  SRC(ICHSEC00) .
  DEL  SRC(ICHSFR00) .
  DEL  SRC(IGC0013A) .
  DEL  SRC(IGC0013C) .
  DEL  SRC(IGC00130) .
  DEL  SRC(RAKFPROF) .
  DEL  SRC(RAKFPWUP) .
  DEL  SRC(RAKFUSER) .
  DEL  MAC($$$$$DOC) .
  DEL  MAC($$$$CUST) .
  DEL  MAC($$$$INFO) .
  DEL  MAC($$$$INST) .
  DEL  MAC($$$$M38J) .
  DEL  MAC($$$$RMVE) .
  DEL  MAC($$COPYRT) .
  DEL  MAC($$NOTICE) .
  DEL  MAC(A@PREP)   .
  DEL  MAC(B@RECV)   .
  DEL  MAC(C@APPLY)  .
  DEL  MAC(D@ACCPT)  .
  DEL  MAC(LPABACK)  .
  DEL  MAC(LPAREST)  .
  DEL  MAC(MINPRF)   .
  DEL  MAC(MINUSR)   .
  DEL  MAC(RAKFRMV)  .
  DEL  MAC(RAKF2MVS) .
  DEL  MAC(TK3USR)   .
  DEL  MAC(ZAPMVS38) .
  DEL  MAC(ZJW0003)  .
  DEL  MAC(CJYPCBLK) .
  DEL  MAC(CJYRCVTD) .
  DEL  MAC(CJYUCBLK) .
  DEL  MAC(YREGS)    .
  DEL  MAC(RAKF)     .
  DEL  MAC(RAKFPROF) .
  DEL  MAC(RAKFPWUP) .
  DEL  MAC(RAKFUSER) .
  DEL  MAC(RAKFINIT) .
  DEL  SYSMOD(TRKF120) .
 ENDUCL .
 UCLIN ACDS .
  DEL  SRC(CJYRCVT)  .
  DEL  SRC(ICHRIN00) .
  DEL  SRC(ICHSEC00) .
  DEL  SRC(ICHSFR00) .
  DEL  SRC(IGC0013A) .
  DEL  SRC(IGC0013C) .
  DEL  SRC(IGC00130) .
  DEL  SRC(RAKFPROF) .
  DEL  SRC(RAKFPWUP) .
  DEL  SRC(RAKFUSER) .
  DEL  MAC($$$$$DOC) .
  DEL  MAC($$$$CUST) .
  DEL  MAC($$$$INFO) .
  DEL  MAC($$$$INST) .
  DEL  MAC($$$$M38J) .
  DEL  MAC($$$$RMVE) .
  DEL  MAC($$COPYRT) .
  DEL  MAC($$NOTICE) .
  DEL  MAC(A@PREP)   .
  DEL  MAC(B@RECV)   .
  DEL  MAC(C@APPLY)  .
  DEL  MAC(D@ACCPT)  .
  DEL  MAC(LPABACK)  .
  DEL  MAC(LPAREST)  .
  DEL  MAC(MINPRF)   .
  DEL  MAC(MINUSR)   .
  DEL  MAC(RAKFRMV)  .
  DEL  MAC(RAKF2MVS) .
  DEL  MAC(TK3USR)   .
  DEL  MAC(ZAPMVS38) .
  DEL  MAC(ZJW0003)  .
  DEL  MAC(CJYPCBLK) .
  DEL  MAC(CJYRCVTD) .
  DEL  MAC(CJYUCBLK) .
  DEL  MAC(YREGS)    .
  DEL  MAC(RAKF)     .
  DEL  MAC(RAKFPROF) .
  DEL  MAC(RAKFPWUP) .
  DEL  MAC(RAKFUSER) .
  DEL  MAC(RAKFINIT) .
  DEL  SYSMOD(TRKF120) .
 ENDUCL .
/*
//* ------------------------------------------------------------------*
//* Remove RAKF elements from LINKLIB, LPALIB, PARMLIB and PROCLIB    *
//* ------------------------------------------------------------------*
//SCRATCH EXEC PGM=IEHPROGM
//SYSPRINT DD  SYSOUT=*
//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt
//SYSIN    DD  *
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKF
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPROF
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPWUP
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFUSER
   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PARMLIB,MEMBER=RAKFINIT
/*
//
./ ADD NAME=RAKF2MVS 0200-11093-11093-0000-00101-00101-00000-*RAKF*
//RAKF2MVS JOB (RAKF),
//             'back to MVS Security',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//* ------------------------------------------------------------------*
//* Reinstate MVS security stub modules                               *
//*                                                                   *
//*   /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\      *
//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *
//*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/      *
//*                                                                   *
//*  Prior to running this job RAKF has to be removed completely from *
//*  SMP and system libraries PARMLIB, PROCLIB, LPALIB and LINKLIB.   *
//*  If RAKF is ACCEPTed use job RAFKRMV to achieve this, if RAKF is  *
//*  APPLIed but not ACCEPTed run SMP command "RESTORE S(TRKF120)" to *
//*  remove RAKF from the system.                                     *
//*                                                                   *
//*  After running RAKF2MVS RACF indicated files will no longer be    *
//*  accessible. This may lead to a not IPLable or not accessible     *
//*  system. Removing RAKF and reinstating native MVS security        *
//*  behavior is NOT RECOMMENDED unless in preparation the RACF       *
//*  indicator of all non VSAM datasets, VSAM catalogs and VSAM       *
//*  objects has been turned off.                                     *
//*                                                                   *
//*                                                                   *
//*   /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\      *
//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *
//*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/      *
//*                                                                   *
//*                                                                   *
//* Expected return codes: Step UCLIN:    00                          *
//*                        Step SCRATCH:  00                          *
//*                        Step ICHSEC00: 00                          *
//*                        Step ICHRIN00: 00                          *
//* ------------------------------------------------------------------*
//*
//* ------------------------------------------------------------------*
//* Restore MVS stub modules to SMP                                   *
//* ------------------------------------------------------------------*
//UCLIN   EXEC SMPAPP
//SMPCNTL  DD  *
 UCLIN CDS .
  ADD LMOD(ICHSEC00) STD SYSLIB(LINKLIB)
                     LASTUPD(JCLIN) LASTUPDTYPE(ADD) .
  ADD LMOD(IGC0013{) RENT SYSLIB(LPALIB)
++LMODIN
 ALIAS IGC0013A,IGC0013B,IGC0013C
 ENTRY ICHRIN00
++ENDLMODIN
                     LASTUPD(JCLIN) LASTUPDTYPE(ADD) .
  ADD  MOD(IEFBR14)  LMOD(ICHSEC00) .
  ADD  MOD(ICHRIN00) LMOD(IGC0013{)
                     DISTLIB(AOSBN) FMID(EBB1102) RMID(UZ90283)
                     LASTUPD(JCLIN) LASTUPDTYPE(UPD) .
  ADD SYSMOD(EBB1102) MOD(ICHRIN00) .
 ENDUCL .
 UCLIN ACDS .
  ADD  MOD(ICHRIN00) DISTLIB(AOSBN)   FMID(EBB1102) RMID(UZ90283)
                     LASTUPD(EBB1102) LASTUPDTYPE(ADD) .
  ADD SYSMOD(EBB1102) MOD(ICHRIN00) .
 ENDUCL .
/*
//* ------------------------------------------------------------------*
//* Delete target und and distribution libraries                      *
//* ------------------------------------------------------------------*
//SCRATCH EXEC PGM=IEFBR14
//ASAMPLIB DD  DISP=(OLD,DELETE),DSN=HLQ.ASAMPLIB
//SAMPLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.SAMPLIB
//AMACLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.AMACLIB
//MACLIB   DD  DISP=(OLD,DELETE),DSN=HLQ.MACLIB
//ASRCLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.ASRCLIB
//SRCLIB   DD  DISP=(OLD,DELETE),DSN=HLQ.SRCLIB
//APROCLIB DD  DISP=(OLD,DELETE),DSN=HLQ.APROCLIB
//APARMLIB DD  DISP=(OLD,DELETE),DSN=HLQ.APARMLIB
//* ------------------------------------------------------------------*
//* Reinstate MVS stub modules in LINKLIB and LPALIB                  *
//* ------------------------------------------------------------------*
//ICHSEC00 EXEC  PGM=IEWL
//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB
//AOSB3    DD  DISP=SHR,DSN=SYS1.AOSB3
//SYSLIN   DD  *
 INCLUDE AOSB3(IEFBR14)
 ENTRY   IEFBR14
 NAME    ICHSEC00(R)
/*
//ICHRIN00 EXEC  PGM=IEWL,PARM='RENT'
//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB
//AOSBN    DD  DISP=SHR,DSN=SYS1.AOSBN
//SYSLIN   DD  *
 INCLUDE AOSBN(ICHRIN00)
 ALIAS   IGC0013A,IGC0013B,IGC0013C
 ENTRY   ICHRIN00
 NAME    IGC0013{(R)
/*
//
./ ADD NAME=TK3USR   0200-11093-11093-0000-00005-00005-00000-*RAKF*
HERC01   ADMIN    NONE     Y
HERC02   ADMIN    CUL8TR   Y
HERC03   USER     NONE     N
HERC04   USER     PASS4U   N
IBMUSER  ADMIN    NONE     Y
./ ADD NAME=ZAPMVS38 0200-11093-11093-0000-00083-00083-00000-*RAKF*
//ZAPMVS38 JOB (RAKF),
//             'ZAP MVS for RAKF',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=2048K,
//             MSGLEVEL=(1,1)
//*-------------------------------------------------------------------*
//*                                                                   *
//* Name: ZAPMVS38                                                    *
//*                                                                   *
//* Desc: ZAP MVS 3.8 OPEN, RENAME and SCRATCH processing for RAKF    *
//*                                                                   *
//* !!! Caution: Refer to member $$$$M38J before running this job !!! *
//*                                                                   *
//*-------------------------------------------------------------------*
//ZAP     EXEC PGM=AMASPZAP
//SYSLIB   DD DISP=SHR,DSN=SYS1.LPALIB      <== LPA modules to be ZAPed
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
*
* original ZAP to OPEN processing from
* Phil D's RAKF installation instructions
*
* ===> comment out the following 6 statements  <===
* ===> if you've already applied Phil D's ZAP  <===
*
  NAME IFG0194A IFG0194C
   IDRDATA PD050823
   VER 1392 47E0
   REP 1392 4700
   VER 13FA 47E0
   REP 13FA 4700
*
* fix additional security wholes in OPEN processing
*
  NAME IFG0194A IFG0194C
   IDRDATA JW110302
   VER 13EE 4780
   REP 13EE 4700
   VER 1426 47E0
   REP 1426 4700
*
* fix security wholes in DADSM RENAME processing
*
  NAME IGC00030 IGG03001
   IDRDATA JW110302
   VER 02E8 4710
   REP 02E8 47F0
   VER 02E0 4780
   REP 02E0 4700
   VER 032A 4710
   REP 032A 4700
   VER 036A 47E0
   REP 036A 47F0
   VER 0372 4710
   REP 0372 4700
*
* fix security wholes in DADSM SCRATCH processing
*
  NAME IGC0002I IGG0290A
   IDRDATA JW110302
   VER 0298 47E0
   REP 0298 47F0
   VER 02BA 4780
   REP 02BA 4700
*
* fix security wholes in DADSM SPACE ALLOCATION processing
*
  NAME IGG0553A IGG0553A
   IDRDATA JW110302
   VER 014A 4780
   REP 014A 4700
   VER 015C 4780
   REP 015C 4700
   VER 016E 4780
   REP 016E 4700
*
  NAME IGG0553A IGG0553E
   IDRDATA JW110302
   VER 0234 4780
   REP 0234 4700
/*
//
./ ADD NAME=ZJW0003  0200-11093-11093-0000-00041-00041-00000-*RAKF*
//ZJW0003  JOB (RAKF),
//             'Modify MSTRJCL',
//             CLASS=A,
//             MSGCLASS=X,
//             REGION=8192K,
//             MSGLEVEL=(1,1)
//*-------------------------------------------------------------------*
//*                                                                   *
//* Name: ZJW0003                                                     *
//*                                                                   *
//* DESC: Install USERMOD ZJW0003 to modify generation of MSTRJCL     *
//*       RAKF DD statements added for early initialization           *
//*                                                                   *
//*-------------------------------------------------------------------*
//RECEIVE EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD (ZJW0003).
++VER (Z038) FMID(EBB1102).
++MACUPD(SGIEE0MS).
>< CHANGE NAME=SGIEE0MS
         DC    CL80'//RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),'
         DC    CL80'//            DISP=SHR'
         DC    CL80'//RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),'
         DC    CL80'//            DISP=SHR'
/*
//SMPCNTL  DD  *
 REJECT  SELECT(ZJW0003)
 .
 RESETRC
 .
 RECEIVE SELECT(ZJW0003)
 .
/*
//APPLY   EXEC SMPAPP
//AMODGEN  DD  DISP=SHR,DSN=SYS1.AMODGEN
//SMPCNTL  DD  *
 APPLY   SELECT(ZJW0003)
         DIS(WRITE)
 .
/*
//
