++PTF(RRKF002) /*
 Make RACINIT Password Changes permanent */ .
++VER(Z038) FMID(TRKF120) PRE(RRKF001)
 /*
 Summary of Changes:
 -------------------

 + Make RACINIT Password Changes permanent:

   Before application of this PTF a new password supplied as NEWPASS
   parameter of a RACINIT macro was updated in the in-core users table
   only and thus lived until the in-core table was replaced by the
   contents of the source users table at RAKF intialization time or by
   running RAKFUSER. Thus users were able to change their passwords
   only temporary. Permanent password changes required an RAKF
   administrator to edit the RAKF users table manually.

   This PTF changes processing of the NEWPASS parameter to queue the
   new password for update in the source users table in addition to
   updating the in-core users table. The password changes queue is
   applied during RAKFUSER processing to the source users table before
   the new in-core users table is created from the source table. This
   makes all password changes initiated by end users through using the
   password change facility of an application permanent and thus
   fully functional (for example changing the password at TSO logon
   time by entering currentpw/newpw at the "ENTER PASSWORD" prompt).

 + introduce change history to source member ICHSFR00

 Special Installation Instructions:
 ----------------------------------

 1. This PTF modifies elements that are not provided inline. These
    elements will be read during APPLY and ACCEPT processing from
    a PDS pointed to by ddname ELEMENTS. File RRKF002.elements.zip
    contains this PDS in XMIT370 format. Before the PTF can be APPLIed
    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and
    a //ELEMENTS DD DSN=.... statement pointing to the PDS needs to
    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After
    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be
    deleted and the //ELEMENTS DD statement can be removed from the
    SMP jobs.

    The following steps can be used to RECEIVE the PDS from file
    RRKF002.elements.zip:

    o Unzip rrkf002.elements.xmi from RRKF002.elements.zip and upload
      it to dataset RAKF.RRKF002.ELEMENTS.XMI (LRECL=80,RECFM=FB) on
      your MVS system using your standard unzip utility and upload
      software.

    o Submit the following job (requires the RECV370 utility to be
      installed, of course):

      //RCVELEMS JOB ...
      //RECV370  EXEC PGM=RECV370
      //RECVLOG   DD SYSOUT=*
      //XMITIN    DD DSN=RAKF.RRKF002.ELEMENTS.XMI,DISP=SHR
      //SYSPRINT  DD SYSOUT=*
      //SYSUT1    DD DSN=&&SYSUT1,
      //             UNIT=SYSDA,
      //             SPACE=(CYL,(10,5)),
      //             DISP=(,DELETE,DELETE)
      //SYSUT2    DD DSN=RAKF.RRKF002.ELEMENTS,
      //             DISP=(,CATLG),SPACE=(TRK,(6,2,1),RLSE),
      //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),
      //             UNIT=SYSDA
      //SYSIN     DD DUMMY
      //SYSUDUMP  DD SYSOUT=*

    The dataset names used in this example can be changed to anything
    you like as long as the //ELEMENT DD statement in the SMP APPLY
    and ACCEPT jobs points to the dataset created by //SYSUT2 DD of
    the RCVELEMS job.

 2. RECEIVE and APPLY the PTF as usual. Don't IPL the system!

 3. Perform step 1. b) from member $$$$CUST in HLQ.SAMPLIB (HLQ = high
    level qualifier of the RAKF libraries) to define the RAKF
    password changes queue dataset.

 4. Perform step 4 from member $$$$CUST in HLQ.SAMPLIB to add the RAKF
    password changes queue dataset DD statement to MSTRJCL. The sample
    usermod ZJW0003 provided in HLQ.SAMPLIB has been adapted by this
    PTF and can be rerun without changes if the original version had
    been used at RAKF installation time.

 5. IPL the system using the CLPA option.

 6. ACCEPT the PTF according to your preferences after sufficient
    testing.
 */ .
++JCLIN .
//RRKF002  JOB 1,'RAKF 1.2',MSGLEVEL=1,CLASS=A
//*
//* JCLIN for RAKF 1.2 PTF RRKF002
//*
//ASMUSER  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
//         DD  DISP=SHR,DSN=RAKF.MACLIB
//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFUSER)
//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFUSER)
//ASMPSAV  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
//         DD  DISP=SHR,DSN=RAKF.MACLIB
//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFPSAV)
//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFPSAV)
//RAKFUSER EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB
//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ
//SYSLIN   DD  *
 INCLUDE SYSPUNCH(RAKFUSER)
 INCLUDE SYSPUNCH(RAKFPSAV)
 ENTRY   CJYRUIDS
 NAME    RAKFUSER(R)
/*
++SRCUPD(ICHSFR00) .
./  CHANGE NAME=ICHSFR00,SSI=02020000
*                                                                   @02
*    Change History                                                 @02
*                                                                   @02
*    2011/04/03 TRKF120 base version                                @02
*    2011/04/26 RRKF002 introduce change history                    @02
*                       enable end users to change their passwords  @02
*                       permanently: store user's password change   @02
*                       request in fetch protected CSA and pass the @02
*                       request address to RAKFPWUP which queues it @02
*                       for replacement in the RAKF users table     @02
*                       at next run of RAKFUSER                     @02
*                                                                   @02
********************************************************************@02
         GETMAIN RU,LV=PWUPL,SP=227 get fetch protected CSA         @02
         MVC   0(PWUPCMDL,R1),PWUPSTRT move SVC 34 plist to CSA area@02
         L     R3,PWUPXTBA         get translate table address      @02
         USING PWUPSTRT,R1         address CSA area now             @02
         ST    R1,PWUPADDR         store CSA area address for unpack@02
         UNPK  PWUPUNPK(9),PWUPADDR(5) unpack CSA area address      @02
         MVC   PWUPAHEX(8),PWUPUNPK unpacked address to SVC 34 plist@02
         TR    PWUPAHEX(8),0(R3)   translate address to printable   @02
         DROP  R1                  revert to standard addressability@02
         MVC   PWUPCMDL(PWUPRECL,R1),PWUP initialize change record  @02
         IC    R3,0(,R5)           length of user                   @02
         BCTR  R3,0                subtract 1 for MVC               @02
         EX    R3,PWUPMVCU         copy user                        @02
         IC    R3,WORKPASS         length of new password           @02
         BCTR  R3,0                subtract 1 for MVC               @02
         EX    R3,PWUPMVCP         copy new password                @02
         XR    R0,R0               set R0 = 0 for SVC 34            @02
         SVC   34                  S RAKFPWUP,PARM='PWUPAHEX'       @02
         XC    WORKPASS+1(8),=C'SECURITY' encrypt
         IC    R1,WORKPASS         length of new password
         EX    R1,RACIRPWD         replace password
PWUPSTRT DC    AL2(PWUPCMDL)       parameter list to start RAKFPWUP>@02
         DC    X'0000'              >is copied to CSA subpool 227  >@02
         DC    C'S RAKFPWUP,PARM=''' >fetch protected storage with >@02
PWUPAHEX DS    CL8                  >address passed in PARM field  >@02
         DC    C''''                >in hexadecimal printable format@02
PWUPCMDL EQU   *-PWUPSTRT          length of parameter list         @02
PWUP     DS    0C                  changes queue record             @02
PWUPUSER DC    CL8' '              userid                           @02
         DC    C' '                filler                           @02
PWUPPSWD DC    CL8' '              new password                     @02
         DC    C' '                filler                           @02
PWUPRECL EQU   *-PWUP              record length of changes queue   @02
PWUPL    EQU   *-PWUPSTRT          total length of CSA area         @02
         ORG   PWUP                changes queue record is >        @02
PWUPADDR DS    F                      > temporarily used   >        @02
         DS    X                      > for conversion of  >        @02
PWUPUNPK DS    CL8                    > CSA area to        >        @02
         DS    X                      > unpacked format             @02
         ORG   PWUP+PWUPRECL       restore program counter          @02
         USING PWUPSTRT,R1         address CSA area now             @02
PWUPMVCU MVC   PWUPUSER(1),1(R5)   get user and new password >      @02
PWUPMVCP MVC   PWUPPSWD(1),WORKPASS+1  > into change queue record   @02
         DROP  R1                  revert to standard addressability@02
*                                  spaceholder blanks removed       @02
         DC    CL23' '             rest of spaceholder blanks       @02
PWUPHXTB DC    C'0123456789ABCDEF' translate RAKFPWUP address to >  @02
PWUPXTBA DC    A(PWUPHXTB-240)      > hex printable format          @02
./ ENDUP
++SRCUPD(RAKFPWUP) .
./  CHANGE NAME=RAKFPWUP,SSI=02020000
         PRINT NOGEN
*
**********************************************************************
*                                                                    *
* NAME: RAKFPWUP                                                     *
*                                                                    *
* TYPE: Assembler Source                                             *
*                                                                    *
* DESC: Process Password Update Requests                             *
*                                                                    *
* FUNCTION: - retrieve username and new password from CSA area       *
*             allocated by ICHSFR00 in subpool 227 (fetch protected) *
*           - clear and free CSA area                                *
*           - append username and new password to the RAKF password  *
*             change queue, a sequential dataset with LRECL=18,      *
*             RECFM=F containing one line per password change in the *
*             following format:                                      *
*                                                                    *
*             ----+----1----+---                                     *
*             uuuuuuuu pppppppp                                      *
*                                                                    *
*             where uuuuuuuu is the username and pppppppp is the new *
*             password, each padded to the right with blanks to 8    *
*             characters.                                            *
*                                                                    *
* REQUIREMENTS: - RAKF password change queue pointed to by ddname    *
*                 RAKFPWUP using DISP=MOD in the DD statement.       *
*                                                                    *
**********************************************************************
*
* initialize
*
         SAVE  (14,12),,RAKFPWUP_&SYSDATE._&SYSTIME
         USING RAKFPWUP,R15        establish => program EP
         ST    R13,SAVEAREA+4      save HSA
         LA    R11,SAVEAREA        establish => savearea
         ST    R11,8(R13)          save LSA
         LR    R13,R11             setup => our savearea
         USING SAVEAREA,R13        new addressability
         DROP  R15                 program EP no longer needed
         B     CONTINUE            branch around savearea
SAVEAREA DS    18F                 savearea
*
* Begin of code
*
CONTINUE LR    R5,R1               remember PARM plist address
         MODESET MODE=SUP,KEY=ZERO authorize ourselves
         L     R1,0(,R5)           address of PARM field plist
         LH    R5,0(,R1)           length of PARM field
         CH    R5,=H'8'            is PARM field length 8 characters?
         BNE   INVPARM              talk dirrty and exit if not
         MVC   ADDRHEX,2(R1)       get PARM field in check plist
         MVC   ADDRUNPK,2(R1)      get PARM field for translate
         TR    ADDRUNPK,HEXTBL     translate PARM field to zoned
         PACK  ADDRESS(5),ADDRUNPK(9) pack PARM field
         L     R1,ADDRESS          address storage pointed to by PARM
         CLC   0(LPWUPCMD,R1),STRTPWUP parmlist from ICHSFR00 found?
         BNE   INVPARM              talk dirrty and exit if not
         MVC   PWUPUSER(8),PWUPUSER-STRTPWUP(R1) get user
         MVC   PWUPPSWD(8),PWUPPSWD-STRTPWUP(R1) get new password
         XC    0(LPWUP,R1),0(R1)   clear ICHSFR00 parmlist storage
         FREEMAIN RU,LV=LPWUP,A=ADDRESS,SP=227 free parmlist storage
         ENQ    (SECURITY,USERS,E,,SYSTEM),RET=HAVE serialization
         OPEN  (QUEUE,(OUTPUT))    open password change queue
         PUT   QUEUE,PWUP          write entry
         CLOSE (QUEUE)             close password change queue
         DEQ   (SECURITY,USERS,,SYSTEM) release ENQ
         MVC   SUCCESS+38(8),PWUPUSER move user into success message
         WTO   MF=(E,SUCCESS)      tell operator
*
* return
*
RETURN   MODESET MODE=PROB,KEY=NZERO return to problem state
         L     R13,SAVEAREA+4      get caller's savearea
         RETURN (14,12),,RC=0      return
INVPARM  WTO   'RAKF006W invalid password update request ignored'
         B     RETURN
*
* data area
*
STRTPWUP DC    AL2(LPWUPCMD)       parameter list that must have been..
         DC    X'0000'               .. used to start this RAKFPWUP ..
         DC    C'S RAKFPWUP,PARM=''' .. run. This is used to perform ..
ADDRHEX  DS    CL8                   .. a validity check of the CSA ..
         DC    C''''                 .. storage addressed through ..
LPWUPCMD EQU   *-STRTPWUP            .. the PARM field
PWUP     DS    0C                  changes queue record
PWUPUSER DC    CL8' '              userid
         DC    C' '                filler
PWUPPSWD DC    CL8' '              new password
         DC    C' '                filler
CHGLRECL EQU   *-PWUP              record length of changes queue
LPWUP    EQU   *-STRTPWUP          total length of CSA area
ADDRUNPK DS    CL8                 unpacked address
         DC    X'C0'               sign and dummy digit
ADDRESS  DS    F                   packed address
         DS    X                   dummy digit and sign after pack
SECURITY DC     CL8'CJYRCVT'       resource name for ENQ
USERS    DC     CL8'CJYUSRS'       resource name for ENQ
QUEUE    DCB   DDNAME=RAKFPWUP,MACRF=PM,DSORG=PS password change queue
SUCCESS  WTO   'RAKF007I password update for user UUUUUUUU queued',MF=L
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
HEXTBL   DC    X'00000000000000000000000000000000' 0
         DC    X'00000000000000000000000000000000' 1
         DC    X'00000000000000000000000000000000' 2
         DC    X'00000000000000000000000000000000' 3
         DC    X'00000000000000000000000000000000' 4
         DC    X'00000000000000000000000000000000' 5 translate table
         DC    X'00000000000000000000000000000000' 6 to convert CSA
         DC    X'00000000000000000000000000000000' 7 address from PARM
         DC    X'00000000000000000000000000000000' 8 field to zoned
         DC    X'00000000000000000000000000000000' 9 format
         DC    X'00000000000000000000000000000000' A
         DC    X'00000000000000000000000000000000' B
         DC    X'00FAFBFCFDFEFF000000000000000000' C
         DC    X'00000000000000000000000000000000' D
         DC    X'00000000000000000000000000000000' E
         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' F
*
* equates
*
         YREGS                     register equates
         END   RAKFPWUP            end of program
./ ENDUP
++SRCUPD(RAKFUSER) .
./  CHANGE NAME=RAKFUSER,SSI=02020000
*    2011/04/26 RRKF002 enable end users to change their passwords  @02
*                       permanently: Before updating the incore     @02
*                       users table RAKFUSER calls RAKFPSAV to      @02
*                       update UDATA with the temporary password    @02
*                       changes queued since the previous execution @02
*                                                                   @02
********************************************************************@02
*                                                                   @02
         L      R15,RAKFPSAV        get password changer address    @02
         BALR   R14,R15             call it                         @02
*                                                                   @02
RAKFPSAV DC     V(RAKFPSAV)        password change utility          @02
*                                                                   @02
./ ENDUP
++MACUPD(RAKFPWUP) .
./  CHANGE NAME=RAKFPWUP,SSI=02020000
//RAKFPWUP  DD  DSN=SYS1.SECURE.PWUP,DISP=MOD                       @02
./ ENDUP
++MACUPD(RAKFUSER) .
./  CHANGE NAME=RAKFUSER,SSI=02020000
//RAKFPWUP DD DSN=SYS1.SECURE.PWUP,DISP=SHR                         @02
./ ENDUP
++SRC(RAKFPSAV) TXLIB(ELEMENTS) DISTLIB(ASRCLIB) SYSLIB(SRCLIB) .
++MAC($$$$CUST) TXLIB(ELEMENTS) .
++MAC(RAKFRMV)  TXLIB(ELEMENTS) .
++MAC(ZJW0003)  TXLIB(ELEMENTS) .
