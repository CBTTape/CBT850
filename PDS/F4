./ ADD NAME=CJYRCVT  3800-90253-05235-0000-00133-00073-00133-*PHILS*
         TITLE 'INITIALIZE OUR RACF CVT'
* CPARM='XREF(SHORT),OBJ,NODECK',LPARM='AC=1'                 CJYRCVT
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR
         EJECT
CJYRCVT  CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         PRINT NOGEN
         SAVE  (14,12),,CJYRCVT_&SYSDATE._&SYSTIME
         LR    R12,R15             USE ENTRY AS BASE
         USING CJYRCVT,R12         " " "
         ST    R13,SAVEAREA+4      SAVE CALLER'S SAVE AREA ADDR
         LA    R2,SAVEAREA         MY SAVEAREA
         ST    R2,8(R13)           SAVE MY AREA
         LR    R13,R2              LOAD REGISTER 13 WITH SAVEAREA
*
         GETMAIN RU,LV=GMLEN,SP=245 GET SQA
         LR    R4,R1               SAVE AREA
         LA    R5,GMLEN            LENGTH
         LR    R6,R4               TARGET
         LA    R7,0                ZERO FILL
         MVCL  R4,R6               MOVE IT
         LR    R4,R1               BRING BACK R1
         USING RCVT,R4             ADDRESS IT
         MVC   RCVTID,=C'RCVT'     MOVE NAME
         MVI   RCVTVERS,X'06'      V1R7 OF RACF
         MVI   RCVTFLG1,RCVTTAPE TAPE
         MVI   RCVTSTA1,X'FF'
         MVI   RCVTAUOP,X'7A'
         LA    R2,RCVTEND          POINT TO G.M. AREA AFTER RCVT
         LA    R3,CJYRCVTL         LENGTH
         LA    R6,CJYRCVTX         POINT TO OUR CODE
         LR    R7,R3               LENGTH EQUAL
         MVCL  R2,R6               MOVE IT
         LA    R2,RCVTEND          ADDRESS OF CJYRCVT
         ST    R2,RCVTISTL         INSTALLATION POINTER
         LA    R2,RCVTEND+RACSTAT-CJYRCVTX CDT POINTER
         ST    R2,RCVTREXP         RACSTAT POINTER
         LA    R2,RCVTEND+CDT-CJYRCVTX CDT POINTER
         ST    R2,RCVTCDTP         SAVE IT
         LA    R2,RCVTEND+ICHAUTAB-CJYRCVTX CDT POINTER
         ST    R2,RCVTAUTP         SAVE IT
         L     R2,FLCCVT-PSA(0)    LOAD CVT
         ST    R4,CVTRAC-CVTMAP(R2) SAVE IN CVT
         WTO   'RCVT WAS PROCESSED SUCCESSFULLY'
         L     R13,SAVEAREA+4      LOAD OLD REG 13
         RETURN (14,12),RC=0       RETURN TO CALLER
*
         LTORG
SAVEAREA DS    18F
CJYRCVTX DC    XL8'0'
RACSTAT  SAVE  (14,12),,RACSTAT_&SYSDATE._&SYSTIME
         DROP  ,
         LR    R12,R15             USE ENTRY AS BASE
         USING RACSTAT,R12         " " "
         LA    R15,0               RC = 0
         ICM   R2,B'1111',0(R1)    CLASS TO CHECK FOR
         BZ    RETURN              NONE, RETURN
         LA    R3,CDT              CDT
         LA    R4,CDTE#            NUMBER OF CDTS.
CDTLOOP  CLC   0(8,R2),3(R3)       US?
         BE    FOUNDCDT            YES, GO ON
         LA    R3,CDTELEN(R3)      NEXT
         BCT   R4,CDTLOOP          GO ON
         LA    R15,8               SORRY
         B     RETURN              ....
FOUNDCDT LA    R15,0               RACF ACTIVE, CLASS ACTIVE
         ICM   R2,B'1111',4(R1)    ENTRY
         BZ    RETURN              NONE ...
         ST    R3,0(R2)            SAVE CDT ADDRESS
RETURN   RETURN (14,12),RC=(15)    BYE ...
*
CDT      DC    X'003005',C'DASDVOL GDASDVOL',X'06E0E00078',XL24'00'
CDTELEN  EQU   *-CDT
         DC    X'003012',C'FACILITY        ',X'27F0F00118',XL24'00'
         DC    X'00302D',C'TSOPROC         ',X'08C0E00110',XL24'00'
         DC    X'00302E',C'ACCTNUM         ',X'27F0F00110',XL24'00'
         DC    X'00302F',C'PERFGRP         ',X'0320200110',XL24'00'
         DC    X'003027',C'GDASDVOLDASDVOL ',X'06E0E000E0',XL24'00'
         DC    X'003028',C'PMBR    PROGRAM ',X'27C0E00100',XL24'00'
         DC    X'003029',C'PROGRAM PMBR    ',X'08C0E00180',XL24'00'
         DC    X'003030',C'TSOAUTH         ',X'08E0E00110',XL24'00'
         DC    X'003038',C'PROPCNTL        ',X'08E0E00110',XL24'00'
CDTE#    EQU   (*-CDT)/CDTELEN
*
ICHAUTAB DC    CL8'DSIOST',XL4'80000000'   NCCF
         DC    CL8'DSILAR',XL4'80000000'   NCCF
         DC    XL4'00000000'               END OF CHAIN
*
CJYRCVTL EQU   *-CJYRCVTX
*
         ICHPRCVT
RCVTEND  DS    0H
GMLEN    EQU   *-RCVT+CJYRCVTL
         CVT     DSECT=YES
         IHAPSA  DSECT=YES
         IHASCVT
         COPY    CJYRCVTD
*
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=ICHRIN00 0200-11090-11093-0000-00048-00048-00000-*RAKF*
         TITLE 'RAKF SVCs'
ICHRIN00 CSECT
         ENTRY IGC0013A,IGC0013B,IGC0013C
*
**********************************************************************
*                                                                    *
* NAME: ICHRIN00                                                     *
*                                                                    *
* TYPE: Assembler Source                                             *
*                                                                    *
* DESC: Stub module for RAKF SVCs                                    *
*                                                                    *
* FUNCTION: provide dummy RACF SVC 132                               *
*           provide real RAKF SVCs 130, 131, 133                     *
*                                                                    *
**********************************************************************
*
         USING ICHRIN00,R6         SCV entry R6 = EP
         B     SVC130              continue with IGC00130
         DC    C'IGC00130 RAKF  &SYSDATE. ' eye catcher
SVC130   L     R6,RAKF0130         address of SVC 130
         BR    R6                  go for it
*
         USING IGC0013A,R6         SCV entry R6 = EP
IGC0013A B     SVC131              continue with IGC0013A
         DC    C'IGC0013A RAKF  &SYSDATE. ' eye catcher
SVC131   L     R6,RAKF013A         address of SVC 131
         BR    R6                  go for it
*
         USING IGC0013B,R6         SCV entry R6 = EP
IGC0013B B     SVC132              continue with IGC0013B (dummy)
         DC    C'ICHRIN00 DUMMY &SYSDATE. ' eye catcher
SVC132   LA    R15,0               indicate RACLIST successful ..
         LA    R0,4                 .. but no profiles mapped
         BR    R14                 return to the caller
*
         USING IGC0013C,R6         SCV entry R6 = EP
IGC0013C B     SVC133              continue with IGC0013C
         DC    C'IGC0013C RAKF  &SYSDATE. ' eye catcher
SVC133   L     R6,RAKF013C         address of SVC 133
         BR    R6                  go for it
*
*
RAKF0130 DC    V(RAKF0130)         SVC 130 (RACHECK)
RAKF013A DC    V(RAKF013A)         SVC 131 (RACINIT)
RAKF013C DC    V(RAKF013C)         SVC 133 (RACDEF)
         YREGS                     register equates
         END   ICHRIN00
./ ADD NAME=ICHSEC00 0200-11090-11093-0000-00158-00158-00000-*RAKF*
         TITLE 'RAKF Initialization Program'
ICHSEC00 CSECT
*
**********************************************************************
*                                                                    *
* NAME: ICHSEC00                                                     *
*                                                                    *
* TYPE: Assembler Source                                             *
*                                                                    *
* DESC: Initialize RAKF                                              *
*                                                                    *
* FUNCTION: - output banner to console                               *
*           - check if SAFV is already defined and initialized       *
*             o if yes: skip initialization and go directly to       *
*                       profile and user table initialization        *
*           - try to read initialization directive from              *
*             parmlib member RAKFINIT:                               *
*             o if first line of member starts with YES:    continue *
*             o if first line of member starts with NO:     exit     *
*             o else, of if member doesn't exist:                    *
*               + ask operator for permission to initialize          *
*                 if operator denies permission:            exit     *
*           - get SQA storage for SAFV and initialize it             *
*           - put entry address of SAF router ICHSFR00 in SAFV       *
*           - initialize RCVT                                        *
*           - initialize profile table                               *
*           - initialize user table                                  *
*                                                                    *
* REQUIREMENTS: - ICHSFR00 in LPA                                    *
*               - RAKFPROF and RAKFUSER in linklist                  *
*               - parmlib defined through ddname IEFPARM             *
*               - user and profile table DDs as needed               *
*                 by RAKFPROF and RAKFUSER                           *
*                                                                    *
**********************************************************************
*
         PRINT NOGEN
         SAVE  (14,12),,ICHSEC00_&SYSDATE._&SYSTIME
         USING ICHSEC00,R15        establish => program EP
         ST    R13,SAVEAREA+4      save HSA
         LA    R11,SAVEAREA        establish => savearea
         ST    R11,8(R13)          save LSA
         LR    R13,R11             setup => our savearea
         USING SAVEAREA,R13        new addressability
         DROP  R15                 program EP no longer needed
         B     CONTINUE            branch around savearea
SAVEAREA DS    18F                 savearea
*
* identify
*
CONTINUE WTO   'RAKF is based on the ESG Security System'
         WTO   'written by Craig J. Yasuna               (Mar 1991)'
         WTO   'adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)'
         WTO   '                     Phil Roberts        (Apr 2011)'
         WTO   '                     Juergen Winkelmann  (Apr 2011)'
*
* RAKF already active?
*
         L     R2,FLCCVT-PSA(0)    get CVT address from PSA
         ICM   R3,B'1111',CVTSAF(R2) SAFV already defined?
         BZ    GOFORIT             no RAC active, continue activation
         USING SAFV,R3             addressability of SAFV
         CLC   SAFVIDEN(4),SAFVID  SAFV initialized?
         BNE   GOFORIT             no RAC active, continue activation
         DROP  R3                  SAFV no longer needed
         WTO   'RAKF005I RAKF is already active' tell operator
         B     PROFUSER            initialize user and profile table
*
* read parmlib
*
GOFORIT  LA    R11,PARMLIB         establish ..
         USING IHADCB,R11           .. DCB addressability
         OPEN  PARMLIB             open PARMLIB
         LH    R12,DCBBLKSI        get blocksize
         GETMAIN EU,LV=(R12),A=BLKADDR get storage for block
         FIND  PARMLIB,RAKFINIT,D  find member RAKFINIT
         LTR   R15,R15             parmlib member found?
         BNZ   CLOSE                --> no, don't read
         L     R12,BLKADDR         get block address
         READ  INDECB,SF,PARMLIB,(R12),'S' read block
         CHECK INDECB              wait for data to arrive
         MVC   RAKSTART(4),0(R12)  get parmlib input
CLOSE    LH    R12,DCBBLKSI        get blocksize
         FREEMAIN EU,LV=(R12),A=BLKADDR free storage
         CLOSE PARMLIB             close parmlib
         DROP  R11                 DCB no longer needed
*
* decide initialization
*
         CLC   RAKSTART(2),NO      if RAKFINIT directive is NO ..
         BE    NOINIT               .. talk dirrty and don't initialize
         CLC   RAKSTART(3),YES     if RAKFINIT directive is YES ..
         BE    INITMSG              .. initialize RAKF
         WTO   MF=(E,INITWTO)       .. else ask operator
         WTOR  'RAKF002A Reply YES to continue or NO to cancel',       X
               REPLY,4,SECECB,ROUTCDE=(1) .. shall we?
         WAIT  ECB=SECECB          wait for reply
         CLC   REPLY(2),NO         if operator replied NO ..
         BNE   INIT                 .. talk dirrty and don't initialize
NOINIT   WTO   'RAKF004W RAKF not initialized' tell operator
RETURN   L     R13,SAVEAREA+4      get caller's savearea
         RETURN (14,12),,RC=0      return
*
* initialize
*
INITMSG  WTO   MF=(E,INITWTO)      tell operator
INIT     MODESET MODE=SUP,KEY=ZERO authorize ourselves
         GETMAIN RU,LV=SAFVLEN,SP=245 get SQA storage for SAFV
         LR    R3,R1               establish ..
         USING SAFV,R3              .. addressability of SAFV
         XC    SAFV(SAFVLEN),SAFV  clear SAFV
         MVC   SAFVIDEN(4),SAFVID  move identifier into SAFV
         LOAD  EP=ICHSFR00         get SFR address (LPA)
         ST    R0,SAFVSAFR         store SFR address in SAFV
         DROP  R3                  SAFV addressability no longer needed
         L     R2,FLCCVT-PSA(0)    get CVT address from PSA
         ST    R3,CVTSAF(R2)       save SAFV address in CVT
         L     R15,CJYRCVT         get RCVT loader address
         BALR  R14,R15             call it
         MODESET MODE=PROB,KEY=NZERO return to problem state
         WTO   'RAKF003I RAKF is now active',ROUTCDE=(2) tell operator
PROFUSER LOAD  EP=RAKFPROF         load profile updater
         LR    R15,R0              address of entry point
         BALR  R14,R15             call it
         DELETE EP=RAKFPROF        remove it
         LOAD  EP=RAKFUSER         load user updater
         LR    R15,R0              address of entry point
         BALR  R14,R15             call it
         DELETE EP=RAKFUSER        remove it
         B     RETURN              return
*
* data area
*
BLKADDR  DS    F                   address of parmlib read buffer
CJYRCVT  DC    V(CJYRCVT)          RCVT loader
RAKFINIT DC    C'RAKFINIT'         parmlib member name
RAKSTART DC    CL4' '              parameter read from parmlib
REPLY    DC    CL4' '              reply from operator
SAFVID   DC    CL4'SAFV'           SAFV eye catcher
SECECB   DC    A(0)                ECB for WTOR
NO       DC    CL2'NO'             NO
YES      DC    CL3'YES'            YES
INITWTO  WTO   'RAKF001I RAKF is now being activated',                 X
               ROUTCDE=(1),MF=L    tell operator
PARMLIB  DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=R,EODAD=CLOSE
*
* equates
*
CVTSAF   EQU   248 CVTSAF doesn't exist but is a reserved field in 3.8J
         YREGS                     register equates
*
* control block mappings
*
         CVT   DSECT=YES           map CVT
         IHAPSA   DSECT=YES        map PSA
         ICHSAFV  DSECT=YES        map SAFV
         DCBD  DSORG=PO,DEVD=DA    map DCB
         END   ICHSEC00
./ ADD NAME=ICHSFR00 0200-90264-11093-0000-00876-00555-00876-*RAKF*
ICHSFR00 TITLE 'SAF ROUTER - ENTRY FOR ALL SECURITY CALLS'
* CPARM='XREF(SHORT),RENT,OBJ,NODECK',LPARM='RENT,REUS,MAP'   ICHSFR00
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR
         EJECT
ICHSFR00 CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         USING AUTHDS,R10
         USING ICHSFR00,R15
         SAVE  (14,12),,ICHSFR00.&SYSDATE..&SYSTIME
         B     AROUNDZP            GO AROUND OUR ZAP CODE
         L     R15,NEWCODE         GET NEW CODE
         BR    R15                 AND BRANCH TO IT
NEWCODE  DC    F'0'                FOR NEW CODE (OMON ZAPS..)
         DROP  R15
AROUNDZP LR    R12,R15
         USING ICHSFR00,R12        PROGRAM BASE
         USING ACEE,ACEEREG        ADDRESS ACEE
         USING PSA,0               ADDRESS PSA
         LR    R12,R15             FIRST BASE
         L     R9,24(R1)           ADDRESS EXIT WORK AREA
         USING WORKSAVE,R9         ... HELLO SAVE AREA
         XC    WORKAREA(WORKAREL),WORKAREA CLEAR WORKAREA
         ST    R13,WORKSAVE+4      SAVE HSA
         ST    R9,8(R13)           SAVE LSA
         LR    R13,R9              ADDRESS SAVE AREA
         DROP  R9
         USING WORKSAVE,R13        ... HELLO SAVE AREA
         MVC   WORKWTO,REALWTO     MOVE WTO SKEL
*
STRTROUT LR    R9,R1               GET ADDR. OF SAF PARAMETER LIST
         USING SAFP,R9             BASE FOR SAFP PARAMETER LIST
         LA    R2,SAFPAU           RACHECK
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    RACHECK             YES, GO ON
         LA    R2,SAFPFAU          FRACHECK
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    FRACHECK            YES, GO ON
         LA    R2,SAFPDEF          RACDEF
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    RACDEF              YES, GO ON
         LA    R2,SAFPVER          RACINIT
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    RACINIT             YES, GO ON
         LA    R2,SAFPEXT          RACXTRT
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    RACXTRT             YES, GO ON
         LA    R2,SAFPLIS          RACLIST
         CH    R2,SAFPREQT         CHECK REQUEST TYPE
         BE    RTRNGOOD            YES, GO ON
         B     RTRN0000            GO AWAY
         TITLE 'RACHECK PROCESSING (EXISTING RESOURCE) '
RACHECK  L     R8,SAFPRACP         OFFSET TO RACHECK PARAMETER LIST
         AR    R8,R9               ADDR. OF RACHECK PARAMETER LIST.
         USING ACHKLIST,R8
RACHLN31 XR    R2,R2               CLEAR R2
         ICM   R2,B'0111',ACHKCLN  GET CLASS
         BNZ   RACHCLNE            found --> continue
         LA    R2,RACDDSNC         use our DSN CLASS
RACHCLNE XR    ENTYREG,ENTYREG     CLEAR ENTYREG
         ICM   ENTYREG,B'0111',ACHKENT GET ENTITY
*        BNZ   RACHACEE            found --> continue
*        B     RACHGOOD            not found --> exit
*
RACHACEE MVC   WORKCLAS,=CL8' '    BLANK IT OUT
         IC    R1,0(R2)            LENGTH
*        BNZ   RACHNBLK            not zero --> continue
*        B     RACHGOOD            zero --> exit
         BCTR  R1,0                SUB 1 FOR MVC
         EX    R1,RACHMVCC         MVC WORKCLAS(0),1(R2)
         CLC   WORKCLAS(8),=CL8' ' CLASS blank?
         BNE   RACHNBLK               --> no, continue
         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET
RACHNBLK ICM   ACEEREG,B'1111',ACHKACEE POINT TO ACEE
         BNZ   RACHCHCK            NO ACEE -> ALLOW ACCES
         L     R2,PSAAOLD          OUR ASCB
         L     R2,ASCBASXB-ASCB(R2) OUR ASXB
         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE
         BZ    RACHGOOD            WHO KNOWS
RACHCHCK IC    R2,ACHKFLG2         GET AUTH. REQ.
         SLL   R2,3                CONFORM TO RACDEF
         STC   R2,WORKAUTH         SAVE IT
         OC    WORKAUTH,ACHKFLG2   ADD BACK X'80'
         NI    WORKAUTH,X'F0'      TURN OFF LOW ORDER
*
         TM    ACHKFLG1,ACHKLOGS   LOG SUPPRESSED?
         BZ    RACHCHK1            DO ENTITY CHECK
         OI    WORKFLAG,WORKNLOG   SUPPRESS LOG
*
RACHCHK1 BAL   R10,ENTYCHCK        GO DO ENTITY CHECK
         B     RACHGOOD            GOOD RETURN
         B     RACHUNKN            RC4 - UNKN
         B     RACHFAIL            RC8 - FAIL
RACHMVCC MVC   WORKCLAS(0),1(R2)   MOVE CLASS
*
RACHGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNGOOD            GO TO RC 200 CODE
*
RACHUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNWARN            GO TO RC 204 CODE
*
RACHFAIL MVC   SAFPRRET,=F'08'     FAIL ....
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNFAIL            DO ANY EXCEPTIONS
         TITLE 'FRACHECK PROCESSING (EXISTING RESOURCE IN-CORE) '
FRACHECK L     R8,SAFPRACP         OFFSET TO RACHECK PARAMETER LIST
         AR    R8,R9               ADDR. OF RACHECK PARAMETER LIST.
         L     R2,8(R8)            GET CLASS FRACHECK CLASS
         MVC   WORKCLAS,0(R2)      MOVE CLASS
         L     ENTYREG,4(R8)       GET ENTITY FRACHECK ENTITY
         ICM   ACEEREG,B'1111',12(R8) POINT TO ACEE IN FRACHECK
         BNZ   FRACCHCK            GO DO CHECK
         L     R2,PSAAOLD          OUR ASCB
         L     R2,ASCBASXB-ASCB(R2) OUR ASXB
         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE
         BZ    FRACUNKN            UNKNOWN
FRACCHCK IC    R2,0(R8)            GET AUTH. REQ.
         SLL   R2,3                CONFORM TO RACDEF
         STC   R2,WORKAUTH         SAVE IT
         OC    WORKAUTH,0(R8)      ADD BACK X'80'
         NI    WORKAUTH,X'F0'      TURN OFF LOW ORDER
         BAL   R10,ENTYCHCK        GO DO ENTITY CHECK
         B     FRACGOOD            GOOD RETURN
         B     FRACUNKN            RC4 - UNKN
         B     FRACFAIL            RC8 - FAIL
*
FRACGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNGOOD            GO TO RC 200 CODE
FRACUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNWARN            GO TO RC 204 CODE
FRACFAIL MVC   SAFPRRET,=F'08'     FAIL ....
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNFAIL            DO ANY EXCEPTIONS
         TITLE 'RACDEF PROCESSING (NEW RESOURCE) '
RACDEF   L     R8,SAFPRACP         OFFSET TO RACDEF  PARAMETER LIST
         AR    R8,R9               ADDR. OF RACDEF PARAMETER LIST.
         USING RDDFLIST,R8
         XC    SAFPRRET,SAFPRRET   PRIME RC/REAS = 0
         XC    SAFPRREA,SAFPRREA   PRIME RC/REAS = 0
         TM    RDDFFLGS,RDDFTDEL+RDDFNEWN DELETE OR NEWNAME
         BZ    RACDNDEL            NOT DELETE
         TM    RDDFFLG2,RDDFCHKA   CHECKAUTH SPEC.?
         BZ    RACDGOOD            NO, RC=0
*
RACDNDEL ICM   R2,B'0111',RDDFCLNW CLASS ???
         BNZ   RACDGCLS            GOT CLASS
         LA    R2,RACDDSNC         USE OUR DSN CLASS
RACDGCLS TM    RDDFFLGS,RDDF31IN   31 BIT MODE?
RACDEN31 XR    ENTYREG,ENTYREG     CLEAR ENTYREG
         ICM   ENTYREG,B'0111',RDDFENT GET ENTITY
RACDACEE MVC   WORKCLAS,=CL8' '    BLANK IT OUT
         IC    R1,0(R2)            LENGTH
         BCTR  R1,0                SUB 1 FOR MVC
         EX    R1,RACDMVCC         MVC WORKCLAS(0),1(R2)
         CLC   WORKCLAS(8),=CL8' ' CLASS blank?
         BNE   RACDNBLK               --> no, continue
         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET
RACDNBLK ICM   ACEEREG,B'1111',RDDFACEE POINT TO ACEE
         BNZ   RACDCHCK            GO CHECK
         L     R2,PSAAOLD          OUR ASCB
         L     R2,ASCBASXB-ASCB(R2) OUR ASXB
         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE
         BZ    RACDGOOD            WHO KNOWS
RACDCHCK MVI   WORKAUTH,RACFALTR   MOVE AUTH REQ.
*
         TM    RDDFFLG2,RDDFRFI    RACFIND IND?
         BZ    RACDCHK1            NO, DO ENTITY CHECK
         OI    WORKFLAG,WORKNLOG   YES, SUPPRESS LOG
*
RACDCHK1 BAL   R10,ENTYCHCK        GO DO ENTITY CHECK
         B     RACDNEW             GOOD RETURN - CHECK RENAME
         B     RACDNEW             RC4 - UNKN
         B     RACDFAIL            RC8 - FAIL
RACDMVCC MVC   WORKCLAS(0),1(R2)   MOVE CLASS
RACDDSNC DC    X'07',CL8'DATASET'  DATASET CLASS
*
RACDNEW  TM    RDDFFLGS,RDDFNEWN   NEWNAME SPEC?
         BNO   RACDCK18            CHECK 1.8 STUFF
         L     ENTYREG,RDDFNNAM    LOAD NEWNAME
         BAL   R10,ENTYCHCK        GO DO ENTITY CHECK
         B     RACDCK18            CHECK 1.8 STUFF
         B     RACDCK18            CHECK 1.8 STUFF
         B     RACDFAIL            RC8 - FAIL
*
RACDCK18 EQU   *
*
RACDCMCL EQU   *
         B     RACDGOOD            RC4 - UNKN
*
RACDGOOD TM    WORKENTY,8          RC=8
         BO    RACDFAIL            BYPASS RC=4
RACDNVFY TM    WORKENTY,4          RC=4
         BO    RACDUNKN            AT LEAST 1 WARN
         TM    RDDFFLGS,RDDFCHGV   DELETE OR ADD
         BNZ   RACDGDD0            GOOD 0
         TM    RDDFFLG2,RDDFRFIY   RACFIND=YES
         BO    RACDGDD0            --> Yes, RC=0
         TM    RDDFFLG2,RDDFRFI    RACFIND=NO
         BNO   RACDGDD0            --> No, RC=0
         MVC   SAFPRREA,=F'04'     --> Yes, RC=0 & Reason=4
RACDGDD0 XC    SAFPRRET,SAFPRRET   NOTHING ...
         B     RTRNGOOD            GO TO RC 200 CODE
*
RACDUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNWARN            GO TO RC 204 CODE
*
RACDFAIL MVC   SAFPRRET,=F'08'     FAIL ....
         B     RTRNFAIL            DO ANY EXCEPTIONS
         TITLE 'RACXTRT CODE - RETRIEVE DATA FROM PROFILE'
RACXTRT  L     R8,SAFPRACP         OFFSET TO RACXTRT PARAMETER LIST
         AR    R8,R9               ADDR. OF RACXTRT PARAMETER LIST.
         TM    3(R8),X'01'         EXTRACT ...
         BO    RACXEXTR            GO ON
         TM    3(R8),X'03'         EXTRACTN...
         BO    RACXEXTR            GO ON
         B     RACXUNKN            NOT YET SUPPORTED ...
*
RACXEXTR XR    R2,R2               CLEAR R2
         LH    R2,6(R8)            GET OFFSET TO VARIABLE STUFF.
         AR    R2,R8               ADD BEGINNING OF RACXTRT
         ICM   R3,B'1111',0(R2)    GET CLASS ADDRESS
         BZ    RACXUNKN            NONE ....
         CLC   =C'USER',0(R3)      USER CLASS ????
         BNE   RACXUNKN            NO, NOT SUPPORTED
*
         ICM   R3,B'1111',8(R8)    GET ENTITY ADDRESS
         BNZ   RACXENTY            GOT ENTITY(USERNAME)
         ICM   ACEEREG,B'1111',X'14'(R2) ACEE REQ?
         BNZ   RACXACEE            GO ON...
         L     R3,PSAAOLD-PSA(0)   OUR ASCB
         L     R3,ASCBASXB-ASCB(R3) OUR ASXB
         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R3) ACEE
         BZ    RACXUNKN            WHO KNOWS
RACXACEE LA    R3,ACEEUSRI         GET ACEEUSER
RACXENTY ICM   R8,B'1111',X'0C'(R2) CHECK SEGMENT
         BZ    RACXUNKN            BASE NOT SUPPORTED
         CLC   =C'TSO',0(R8)       TSO SEGMENT?
         BNE   RACXUNKN            NO, NOT SUPPORTED
         B     RACXUNKN            GO THERE ANYWAY
*        FIELDS ...
*  GETMAIN AREA IN SP... & RETURN IN ...
*
RACXUNKN MVC   SAFPRRET,=F'08'     NOT PROTECTED ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         B     RTRNWARN            GO TO RC 208 CODE
*
         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - CHECK AUTH'
RACINIT  L     R8,SAFPRACP         OFFSET TO RACINIT PARAMETER LIST
         AR    R8,R9               ADDR. OF RACINIT PARAMETER LIST.
         TM    3(R8),X'C0'         TEST FOR VERIFY
         BO    RTRN0000            ENVIR=VERIFY USED BY JES2 EARLY VFY
*
         L     R2,PSATOLD          ADDRESS TCB
         L     R2,TCBRBP-TCB(R2)   ADDRESS RB
         TM    RBSTAB1-RBSECT(R2),RBFTP CHECK RBTYPE
         BZ    RACIRACR            PRB DID RACROUTE
*
         XR    R3,R3               CLEAR R3
         ICM   R3,B'0111',RBLINKB-RBSECT(R2) PRIOR RB
         S     R3,=A(RBSECT-RBPREFIX) SUBTRACT PFIX LENG
         CLI   RBINTCOD-RBPREFIX+1(R3),X'83' SVC83 (RACINIT)
         BNE   RACIRACR            SVC ISSUED RACROUTE
*
         ICM   R2,B'0111',RBLINKB-RBSECT(R2) PRIOR RB
         TM    RBSTAB1-RBSECT(R2),RBFTP PRB?????
         BNZ   RACINAUT            NO, DON'T BOTHER WITH TABLE
*
         ICM   R2,B'0111',RBCDE1-RBSECT(R2) PRIOR RB
         BZ    RACINAUT            NO CDE
         L     R3,FLCCVT           LOAD CVT
         ICM   R3,B'1111',CVTRAC-CVTMAP(R3) CHECK RCVT
         BZ    RACIERR1            WHO KNOWS
         ICM   R3,B'1111',RCVTAUTP-RCVT(R3) CHECK AUTHORIZED CALLERS
         BZ    RACINAUT            NO TABLE
*
RACIAUTL CLC   =F'0',0(R3)         END OF TABLE?
         BE    RACINAUT            YES, SORRY
         CLC   CDNAME-CDENTRY(,R2),0(R3) IS THIS US?
         BE    RACIMDST            YES, BYPASS TESTAUTH
         LA    R3,12(R3)           NEXT ENTRY
         BE    RACIAUTL            GO ON
*
RACINAUT TESTAUTH FCTN=1,STATE=YES,KEY=YES    APF/SUP/KEY0-7
         LTR   R15,R15             GOT IT?
         BZ    RACIMDST            YES, GO ON
         ABEND 1667,,,SYSTEM       ABEND 683
*
RACIRACR TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1 APF/SUP/KEY0-7
         LTR   R15,R15             GOT IT?
         BZ    RACISCHP            YES, GO ON
         ABEND 1667,,,SYSTEM       ABEND 683
*
RACISCHP TESTAUTH STATE=YES,RBLEVEL=1 SUPV STATE?
         LTR   R15,R15             GOT IT?
         BZ    RACIMDST            YES, GO ON
         OI    WORKFLAG,WORKSUPO   SUP. ON
         MODESET MODE=SUP          SET STATE
*
RACIMDST MODESET EXTKEY=ZERO,SAVEKEY=WORKKEY,WORKREG=2
         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) '
         TM    3(R8),X'40'         TEST FOR CHANGE
         BO    RACIGOOD            NOT YET SUPPORTED ...
         TM    3(R8),X'80'         CREATE = ZERO
         BO    RACINDEL            NO, GO DELETE ACEE
*
         ICM   R5,B'1111',4(R8)    GO TO USERID
         BZ    RACINOID            NONE, CHECK FOR STC ...
         L     R4,FLCCVT           LOAD CVT
         ICM   R4,B'1111',CVTRAC-CVTMAP(R4) CHECK RCVT
         BZ    RACIERR1            WHO KNOWS
         ICM   R4,B'1111',RCVTISTL-RCVT(R4) OUR STUFF?
         BZ    RACIERR1            WHO KNOWS
         ICM   R4,B'1111',CJYUSERS-CJYRCVTD(R4) OUR STUFF?
         BZ    RACIERR1            WHO KNOWS
         USING CBLK,R4             ADDRESS THE BALL -- HELLO BALL
RACICKLP IC    R1,CBLKUSRL         LENGTH OF UID
         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)
         BE    RACIIDOK            ID OK
         ICM   R4,B'1111',CBLKNEXT GO TO NEXT ID
         BNZ   RACICKLP            GO FOR NEXT
RACICSTC LA    R4,STCUID-L'CBLKNEXT POINT TO UID  (TEST FOR STC)
         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)
         BE    RACIIDOK            ID OK
         LA    R4,PRODUID-L'CBLKNEXT POINT TO UID
         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)
         BE    RACIIDOK            ID OK
         B     RACIREVK            WHO KNOWS ...
RACINCLC CLC   CBLKUSER(0),0(R5)   CORE UID VS RACINIT
*
RACIIDOK TM    3(R8),X'08'         PASSCHK=NO?
         BO    RACIACEE            YES, GO MAKE ACEE
         ICM   R3,B'1111',8(R8)    GO TO RACINIT PASSWORD
         BZ    RACIINPW            NO PASSWORD -> INVALID
         MVC   WORKPASS,0(R3)      MOVE PASSWORD
         XC    WORKPASS+1(8),=C'SECURITY' ENCRYPT
         IC    R1,CBLKPWDL         LENGTH OF PSWD IN CORE
         EX    R1,RACICKPW         check password
         BE    RACIPWOK            password is correct
         IC    R1,WORKPASS         LENGTH OF PSWD
         EX    R1,RACISTPW         check STC password
         BE    RACISSTC            YES, IT IS STC
         B     RACIINPW            NO, INVALID PWD.
RACIPWOK EQU   *
RACICHPW EQU   *
RACINCL2 EQU   *
*
         ICM   R3,15,24(R8)        set new password?
         BZ    RACIACEE            no, go make ACEE
         MVC   WORKPASS,0(R3)      yes, move new password
         XC    WORKPASS+1(8),=C'SECURITY' encrypt
         IC    R1,WORKPASS         length of new password
         EX    R1,RACIRPWD         replace password
         SR    R0,R0               clear R0
         LA    R1,RAKFPWUP         get command address
         SVC   34                  execute S RAKFPWUP command
         B     RACIACEE            go make ACEE
RAKFPWUP DC    X'000E0000'         parameter list for ..
         DC    C'S RAKFPWUP'        .. S RAKFPWUP command
RACIRPWD MVC   CBLKPWDL(1),WORKPASS replace in core password
RACICKPW CLC   CBLKPWDL(1),WORKPASS check password
RACISTPW CLC   STCPASS(1),WORKPASS  check STC password
RACIERR1 MVC   WORKWTO+4(60),WTOMSG1 CJYUSERS INVALID
         WTO   MF=(E,WORKWTO)      WRITE IT
         MVC   WORKWTO+4(60),WTOMSG2 STC ACCESS
         ICM   R5,B'1111',4(R8)    GO TO USERID
         IC    R1,0(R5)            GET LENGTH
         EX    R1,RACIWTO1         MOVE NAME FOR WTO
         WTO   MF=(E,WORKWTO)      WRITE IT
         B     RACISSTC            ASSUME STC
RACIWTO1 MVC   WORKWTO+5+WTOMSG2U(0),1(R5) MOVE USERID
*
RACINOID CLC   =F'0',X'C'(R8)      STC ?
         BNE   RACISSTC            YES, DO IT ...
         CLC   =F'0',X'28'(R8)     TERMID SPEC?
         BNE   RACIREVK            TSO ---- > REVOKED
         CLC   =F'0',X'2C'(R8)     JOBNAME SPEC.?
         BNE   RACISBAT            BATCH, OK ....
         ICM   R2,B'1111',PSAAOLD   POINT TO ASCB OLD
         BZ    RACISSTC            ASSUME STC
         CLC   =F'0',ASCBJBNI-ASCB(R2) JOBNAME SPEC.?
         BNE   RACISBAT            BATCH, OK ....
RACISSTC LA    R4,STCUID-L'CBLKNEXT POINT TO UID
         B     RACIACEE            GO BUILD ACEE
RACISBAT LA    R4,PRODUID-L'CBLKNEXT POINT TO UID
         B     RACIACEE            GO BUILD ACEE
         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - BUILD ACEE'
RACIACEE LA    R2,255              PRE-FILL WITH LSQA SUBPOOL
         TM    3(R8),X'10'         S.P. SPEC?
         BNO   RACINDGM            DO GETMAIN
         IC    R2,1(R8)            GET SP NUMBER
RACINDGM GETMAIN RC,LV=ACEEL,SP=(R2) DO GETMAIN
         LR    ACEEREG,R1          ADDRESS AREA
         XC    ACEE(ACEEL),ACEE    CLEAR IT
         MVC   ACEEACEE,=C'ACEE'   ACEE NAME
         STC   R2,ACEESP           SP OF G.M.
         MVC   ACEELEN,=AL3(ACEEL) LENGTH
         MVI   ACEEVRSN,C'1'       VERSION 1
         MVC   ACEEUSER,CBLKUSER   USERID
         MVC   ACEEGRP,CBLKGRP     GROUP
         OI    ACEEFLG1,ACEERACF+ACEECNTL
         OI    ACEEFLG2,ACEENONE   DEFAULT UACC
         L     R2,FLCCVT           CVT
         MVC   ACEEDATE,CVTDATE+1-CVT(R2) MOVE DATE
         CLI   CBLKFLG1,C'Y'       OPER AUTHORITY
         BNE   RACINNOP            NO, SORRY ....
         OI    ACEEFLG1,ACEEOPER   MAKE OPER AUTH.
RACINNOP ICM   R2,B'1111',X'C'(R8) STC ?
         BZ    RACINANS            NO, BATCH
         MVC   ACEEPROC,0(R2)      MOVE PROC NAME FOR STC
RACINANS ICM   R2,B'1111',X'28'(R8) TERMID SPEC?
         BZ    RACINNTR            NO, NONE SPEC.
         MVC   ACEETRID,0(R2)      MOVE PROC NAME FOR STC
RACINNTR CLM   ACEEREG,B'1000',=X'00' ABOVE THE LINE?
         BE    RACICGRP            NO, ADD GROUPS
*
RACICGRP ICM   R3,B'1111',CBLKGRPS POINTER TO C.GRPS
         BNZ   RACICGP1            NONE IN PROFS
         LA    R3,STCGROUP         STC GROUP IF STC
         CLC   =CL8'STC',ACEEUSRI  STC?
         BE    RACICGP1            YES, GO ON
         LA    R3,PRDGROUP         NO USE PRD GROUP
RACICGP1 LA    R5,ACEECGRP         FIRST POINTER
         XR    R2,R2               CLEAR R2
         IC    R2,ACEESP           GET SUBPOOL
RACICGPL GETMAIN RC,LV=CONNL,SP=(R2)
         XC    0(CONNL,R1),0(R1)   CLEAR AREA
         ST    R1,0(R5)            SAVE IN PTR
         MVC   CONNGRP-CONNGRUP(,R1),CONNGRP-CONNGRUP(R3) THEM TO US
         LA    R5,CONNNEXT-CONNGRUP(R1) NEXT POINTER
         ICM   R3,B'1111',CONNNEXT-CONNGRUP(R3) NEXT CONN.
         BNZ   RACICGPL            NEXT CGRP.
*
         CLI   0(R8),X'34'         check length of RACINIT plist
         BNL   RACIAPPL            -> ge x'34' continue
         B     RACINSTA            -> lt x'34' store ACEE addr in ASXB
RACIAPPL ICM   ENTYREG,B'1111',X'30'(R8) ANY APPL REQ?
         BZ    RACITERM            NO, GO ON
         MVC   WORKCLAS,=CL8'APPL' APPL CLASS
         MVI   WORKAUTH,RACFREAD   READ REQ
         BAL   R10,ENTYCHCK        CHECK ENTITY
         B     RACITERM            0 -> OK
         B     RACITERM            4 -> OK
         B     RACIFAPL            8 -> NG
*
RACITERM ICM   ENTYREG,B'1111',X'28'(R8) ANY APPL REQ?
         BZ    RACIALOK            NO, GO ON
         MVC   WORKCLAS,=CL8'TERMINAL' TERM CLASS
         MVI   WORKAUTH,RACFREAD   READ REQ
         BAL   R10,ENTYCHCK        CHECK ENTITY
         B     RACIALOK            0 -> OK
         B     RACIALOK            4 -> OK
         B     RACIFTRM            8 -> NG
*
RACIALOK ICM   R2,B'1111',X'34'(R8) ACEE PTR
         BZ    RACINSTA            SAVE ACEE
         ST    ACEEREG,0(R2)       SAVE ACEE ADDRESS
         B     RACIGOOD            OK ..........
RACINSTA EQU   *
         L     R2,PSAAOLD          ADDRESS ASCB
         L     R2,ASCBASXB-ASCB(R2) ADDRESS ASCB
         ST    ACEEREG,ASXBSENV-ASXB(R2) STORE IN ASXB
         B     RACIGOOD            OK ..........
*
         DROP  R4
         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - DEL. ACEE'
RACINDEL ICM   R2,B'1111',X'34'(R8) ACEE PTR
         BZ    RACIDNAC            DELETE, NO ACEE
         L     ACEEREG,0(R2)       GET ACEE ADDRESS
         B     RACINFRE            GO DO FREEMAIN
RACIDNAC EQU   *
         L     R2,PSAAOLD          OUR ASCB
         L     R2,ASCBASXB-ASCB(R2) OUR ASXB
         C     ACEEREG,ASXBSENV-ASXB(R2) ACEE SAME?
         BNE   RACINTDM            NO, GO DO FREE
         XC    ASXBSENV-ASXB(,R2),ASXBSENV-ASXB(R2) YES, CLEAR
         B     RACINFRE            GO FREE ACEE
*
RACINTDM L     R2,PSAAOLD          OUR ASCB
         L     R2,ASCBASXB-ASCB(R2) OUR ASXB
         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE
         BZ    RACIGOOD            ASXB & TCB  BOTH DUMMY
         XC    ASXBSENV-ASXB(,R2),ASXBSENV-ASXB(R2) CLEAR ASXB
RACINFRE ICM   R2,B'1111',ACEEIEP  ANY OTHER F.M?
         BZ    RACINIEP            NO, SO BYE...
         XR    R3,R3               CLEAR R3
         IC    R3,0(R2)            SUBPOOL
         XR    R4,R4               CLEAR R4
         ICM   R4,B'0111',1(R2)    LENGTH
         FREEMAIN RC,A=(R2),SP=(R3),LV=(R4) FREE ????
*
RACINIEP XR    R2,R2               CLEAR R2
         IC    R2,ACEESP           SUBPOOL
         LA    R3,CONNL            CLEAR R3
         L     R5,ACEECGRP         CONN. GROUPS
         B     RACIFCN2            START FREEMAINS
RACIFCNL L     R5,CONNNEXT-CONNGRUP(R4) LOOP THRU OLD TABLE
         FREEMAIN RC,A=(R4),SP=(R2),LV=(R3) FREE ACEE
RACIFCN2 LTR   R4,R5               MORE ENTRIES?
         BNZ   RACIFCNL             Y - NEXT ENTRY
*
RACINCGP XR    R2,R2               CLEAR R2
         IC    R2,ACEESP           SUBPOOL
         XR    R3,R3               CLEAR R3
         ICM   R3,B'0111',ACEELEN  LENGTH
         FREEMAIN RC,A=(ACEEREG),SP=(R2),LV=(R3) FREE ACEE
         B     RACIGOOD            GO TO GOOD RETURN CODE
         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - BYEEEE'
RACIGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         XC    WORKPASS,WORKPASS   CLEAR JUST IN CASE
         MODESET KEYADDR=WORKKEY,WORKREG=2
         TM    WORKFLAG,WORKSUPO   SUP. ON
         BNO   RTRNGOOD            NO, GO TO RC 200 CODE
         MODESET MODE=PROB         SET STATE
         B     RTRNGOOD            GO TO RC 200 CODE
*
RACIUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...
         MODESET KEYADDR=WORKKEY,WORKREG=2
         TM    WORKFLAG,WORKSUPO   SUP. ON
         BNO   RTRNWARN            NO, GO TO RC 204 CODE
         MODESET MODE=PROB         SET STATE
         B     RTRNWARN            GO TO RC 204 CODE
*
RACIINPW MVC   SAFPRRET,=F'08'     invalid or no password entered
         XC    WORKPASS,WORKPASS   clear just in case
         B     RACIFAIL            BRANCH TO FAIL COMMON
*
RACIREVK MVC   SAFPRRET,=F'28'     REVOKED....
         B     RACIFAIL            BRANCH TO FAIL COMMON
*
RACIFAPL MVC   SAFPRRET,=F'52'     NOT AUTH TO APPL...
         B     RACIFAFM            FAIL & FREEMAIN
RACIFTRM MVC   SAFPRRET,=F'48'     NOT AUTH TO TERM...
*
RACIFAFM ICM   R4,B'1111',ACEECGRP CONN. GROUPS
         BZ    RACIFACF            NO, GO FREEMAIN ACEE
         XR    R2,R2               CLEAR R2
         IC    R2,ACEESP           SUBPOOL
         LA    R3,CONNL            CLEAR R3
         B     RACIFAG2            BYPASS MOVE
RACIFAGL L     R5,CONNNEXT-CONNGRUP(R4) LOOP THRU OLD TABLE
         FREEMAIN RC,A=(R4),SP=(R2),LV=(R3) FREE ACEE
RACIFAG2 LTR   R4,R5               MORE ENTRIES?
         BNZ   RACIFAGL             Y - NEXT ENTRY
*
RACIFACF XR    R2,R2               CLEAR R2
         IC    R2,ACEESP           SUBPOOL
         XR    R3,R3               CLEAR R3
         ICM   R3,B'0111',ACEELEN  LENGTH
         FREEMAIN RC,A=(ACEEREG),SP=(R2),LV=(R3) FREE ACEE
         B     RACIFAIL            BRANCH TO FAIL COMMON
*
RACIFAIL MODESET KEYADDR=WORKKEY,WORKREG=2
         TM    WORKFLAG,WORKSUPO   SUP. ON
         BNO   RACINPWF            no  --> check for WTO suppression
         MODESET MODE=PROB         SET STATE
RACINPWF CLC   SAFPRRET,=F'08'     invalid or no password entered?
         BNE   RACIFWTO            no  --> write message
         LTR   R3,R3               yes --> no password entered?
         BZ    RTRNFAIL            yes --> don't write message
RACIFWTO MVC   WORKWTO+4(60),WTOMSG4  ATTEMPTED ACCESS
         ICM   R5,B'1111',4(R8)    GO TO USERID
         IC    R1,0(R5)            GET LENGTH
         EX    R1,RACIWTO2         MOVE NAME FOR WTO
         WTO   MF=(E,WORKWTO)      WRITE IT
         XC    SAFPRREA,SAFPRREA   NOTHING ...
         XC    WORKPASS,WORKPASS   CLEAR JUST IN CASE
         B     RTRNFAIL            BYE ............
RACIWTO2 MVC   WORKWTO+4+WTOMSG4U(0),1(R5) MOVE USERID
         TITLE 'ALL ROADS LEAD HERE'
RTRN0000 LA    R15,0               RC = 0
         B     RTRNRTRN            GO BACK
*
RTRNGOOD LA    R15,0               RACF RC=0
         B     RTRNRTRN            GO BACK
*
RTRNWARN LA    R15,0               RACF RC=4
         B     RTRNRTRN            GO BACK
*
RTRNFAIL LA    R15,0               RACF RC=8
         B     RTRNRTRN            GO BACK
*
RTRNRTRN L     R13,WORKSAVE+4      RETURN R13
         RETURN (14,12),RC=(15)    BYE
*
         TITLE 'CHECK FOR ACCESS'
ENTYCHCK L     R2,FLCCVT           LOAD CVT
         ICM   R2,B'1111',CVTRAC-CVTMAP(R2) CHECK RCVT
         BZ    ENTYERR1            WHO KNOWS?
         ICM   R2,B'1111',RCVTISTL-RCVT(R2) OUR STUFF?
         BZ    ENTYERR1            WHO KNOWS?
         ICM   R2,B'1111',CJYPROFS-CJYRCVTD(R2) OUR STUFF?
         BZ    ENTYERR1            WHO KNOWS?
         USING RPECBLK,R2          ADDRESS CBLK
         CLC   WORKCLAS(8),=CL8' '    CLASS blank?
         BNE   ENTYNBLK                  --> no, continue
         MVC   WORKCLAS(8),=CL8'DATASET' --> yes, assume DATASET
ENTYNBLK CLC   =C'DATASET',WORKCLAS  CHECK FOR OUR OWN DSNS.
         BNE   ENTYCLLP            NO, GO ON
         IC    R1,ACEEUSRL         GET LENGTH
         BCTR  R1,0                DOWN 1 FOR CLC
         EX    R1,ENTYEXUS         CLC 0(0,ENTYREG),ACEEUSRN
         BE    AUTHGOOD            GO FOR IT
         CLC   0(3,ENTYREG),=C'SYS' is it a ..
         BNE   ENTYCLLP              --> no
         CLC   8(2,ENTYREG),=C'.T'            .. temporary ..
         BNE   ENTYCLLP              --> no
         CLC   16(3,ENTYREG),=C'.RA'                         .. dataset
         BNE   ENTYCLLP              --> no, go on
         B     AUTHGOOD              --> yes, go for it
ENTYCLLP IC    R1,RPECLASL         GET LENGTH
         BCTR  R1,0                SUBTRACT 1 FOR CLC
         EX    R1,ENTYEXEC         CLC RPECLASN(0),WORKCLAS
         BL    ENTYNFND            NOT FOUND
         BNE   ENTYNCLS            NO, GET NEXT
         ICM   R1,B'0001',RPEENTYL GET LENGTH
         BZ    ENTYENFN            '*' ONLY ENTITY?
         BCTR  R1,0                NO, SUBTRACT 1 FOR CLC
         EX    R1,ENTYEXEN         CLC RPEENTYN(0),0(ENTYREG)
         BE    ENTYENFN            FOUND ENTITY
ENTYNCLS ICM   R2,B'1111',RPENEXT  GET NEXT
         BNZ   ENTYCLLP            GO FOR NEXT
ENTYNFND B     ENTYWARN            RETURN WARN
ENTYEXEC CLC   RPECLASN(0),WORKCLAS SAME CLASS?
ENTYEXEN CLC   RPEENTYN(0),0(ENTYREG) CHECK ENTITY
ENTYEXUS CLC   0(0,ENTYREG),ACEEUSRI US?
*
ENTYENFN ICM   R3,B'1111',RPEACCPT POINTER TO ACCESSES
         BZ    ENTYUACC            GO CHECK UACC
*
         USING RPEACCLE,R3         VARIABLE SECTION
ENTYULOP CLC   RPEAUSR,ACEEUSRI    USER EXCEPTION?
         BE    ENTYEXCP            MATCH, GO CHECK
         ICM   R3,B'1111',RPEANEXT NEXT POINTER
         BNZ   ENTYULOP            GO CHECK NEXT
*
ENTYCONN ICM   R4,B'1111',ACEECGRP CONNECT GROUPS
         BZ    ENTYUACC            NONE, GO ON
         USING CONNGRUP,R4         ADDRESS IT
ENTYCONL L     R3,RPEACCPT         GET POINTER AGAIN
ENTYCON2 CLC   RPEAUSR,CONNGRPN    GROUP EXCEPTION?
         BNE   ENTYNCRP            NO, NEXT RPE
         OI    WORKFLAG,WORKOPRB   SET OPER BYPASS
         CLC   WORKAUTH,RPEACS     SUFFICENT ACCESS IN PERMIT?
         BH    ENTYNCRP            NO, CHECK NEXT AUTH.
         B     AUTHGOOD            YES, GO ON ...
ENTYNCRP ICM   R3,B'1111',RPEANEXT NEXT POINTER
         BNZ   ENTYCON2            GO CHECK NEXT EXCEPTION
ENTYNCON ICM   R4,B'1111',CONNNEXT NEXT POINTER
         BNZ   ENTYCONL            GO CHECK NEXT CONNECT
         TM    WORKFLAG,WORKOPRB   BYPASS OPER CHECK?
         BNO   ENTYUACC            NO, GO UACC
         B     ENTYFAIL            ALL CONN.S FAILED
*
ENTYUACC CLC   WORKAUTH,RPEUACC    SUFFICENT ACCESS IN UACC?
         BH    ENTYOPER            NO, RETURN CHECK FOR OP. AUTH
         B     AUTHGOOD            YES, GO ON ...
*
ENTYEXCP CLC   WORKAUTH,RPEACS     SUFFICENT ACCESS IN PERMIT?
         BH    ENTYFAIL            NO, RETURN CHECK FOR OP. AUTH
         B     AUTHGOOD            YES, GO ON ...
*
ENTYOPER CLC   =C'DATASET',RPECLASN  DATASET CLASS
         BE    ENTYOPR2            YES, CHECK OPER AUTH
         CLC   =C'DASDVOL',RPECLASN DASDVOL CLASS
         BE    ENTYOPR2            YES, CHECK OPER AUTH
         B     ENTYFAIL            TOUGH
ENTYOPR2 TM    ACEEFLG1,ACEEOPER   MAKE OPER AUTH.
         BNO   ENTYFAIL            TOUGH
*
         DROP  R4,R3,R2
         CLC   =C'PROD',ACEEUSRI   PROD USERID?
         BNE   AUTHGOOD            NO MSG NEC. -> OPER ALLOWED
         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?
         BO    AUTHGOOD            YES, NO MESS..
         MVC   WORKWTO+4(60),WTOMSG7 INVALID ACCESS TO RESOURCE
         MVC   WORKWTO+4+WTOMSG7U(L'WTOMSG7U),ACEEUSRI MOVE USERID
         WTO   MF=(E,WORKWTO)      WRITE IT
         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON
         MVC   WORKWTO+4(9),=C'RAKF0006 ' USERID/CLASS
         BAL   R11,ENTYENTY        ENTY COMMON
         B     AUTHGOOD            ALLOW ACCESS
*
ENTYERR1 MVC   WORKWTO+4(60),WTOMSG3 PROFS IN ERROR
         MVC   WORKWTO+4+WTOMSG3U(L'WTOMSG3U),ACEEUSRI MOVE USERID
         WTO   MF=(E,WORKWTO)      WRITE IT
         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON
         MVC   WORKWTO+4(9),=C'RAKF0009 ' USERID/CLASS
         BAL   R11,ENTYENTY        ENTY COMMON
         B     AUTHGOOD            ALLOW ACCESS
*
ENTYWARN OI    WORKENTY,4          RC = 4
         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?
         BO    AUTHWARN            SORRY ....
         MVC   WORKWTO+4(60),WTOMSG8 INVALID ACCESS TO RESOURCE
         WTO   MF=(E,WORKWTO)      WRITE IT
         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON
         MVC   WORKWTO+4(9),=C'RAKF000B ' USERID/CLASS
         BAL   R11,ENTYENTY        ENTY COMMON
         B     AUTHGOOD            ALLOW ACCESS
*
ENTYFAIL OI    WORKENTY,8          RC = 8
         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?
         BO    AUTHFAIL            SORRY ....
         MVC   WORKWTO+4(60),WTOMSG5 INVALID ACCESS TO RESOURCE
         WTO   MF=(E,WORKWTO)      WRITE IT
         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON
         MVC   WORKWTO+4(9),=C'RAKF000A ' USERID/CLASS
         BAL   R11,ENTYENTY        ENTY COMMON
         B     AUTHFAIL            FAIL ACCESS
*
ENTYENTY MVC   WORKWTO+4+WTOMSGEU(L'WTOMSGEU),ACEEUSRI MOVE USERID
         MVC   WORKWTO+4+WTOMSGEC(L'WTOMSGEC),WORKCLAS MOVE CLASS
         L     R2,PSAAOLD          ASCB ADDRESS
         ICM   R3,B'1111',ASCBJBNI-ASCB(R2) JOBNAME SPEC.?
         BNZ   ENTYJOBN            YES, GO USE NAME
         L     R3,ASCBJBNS-ASCB(R2) STC ... NAME
ENTYJOBN MVC   WORKWTO+4+WTOMSGEJ(L'WTOMSGEJ),0(R3) MOVE JOBNAME
         LA    R1,43               DEFAULT ENTITY LEN.
         CLC   =C'DATASET',WORKCLAS CLASS = DATASET
         BE    ENTYWTO1            GO DO WTO
         LA    R1,5                LEN = 6
         CLC   =C'VOL',WORKCLAS+4  CLASS = DASDVOL/TAPEVOL
         BE    ENTYWTO1            DO WTO ...
         LA    R1,38               FACILITY = 39
         CLC   =C'FACILITY',WORKCLAS CLASS=FACILITY
         BE    ENTYWTO1            DO WTO ...
         LA    R1,7                ALL ELSE = 8
ENTYWTO1 LA    R2,L'WTOMSGEE-1     MAX LENGTH
         CR    R2,R1               TOO MUCH ?
         BH    ENTYWTO2            NO, ITS OK
         LR    R1,R2               SORRY, MOVE MAX
ENTYWTO2 EX    R1,ENTYERRX         MVC WORKWTO+4+WTOMSGEE(0),0(ENTYREG)
         WTO   MF=(E,WORKWTO)      WRITE IT
         BR    R11                 RETURN
*
ENTYERRX MVC   WORKWTO+4+WTOMSGEE(0),0(ENTYREG) MOVE ENTITY
*
         TITLE 'CONSTANTS AND SUCH'
         LTORG
*
STCUID   DC    AL4(0),X'03',CL8'STC',X'08',C'STCGROUP'
STCPASS  DC    X'08251C06253A1F362D',C'Y'
STCGROUP DC    AL4(0),AL1(8),CL8'STCGROUP'
PRODUID  DC    AL4(0),X'04',CL8'PROD',X'08',C'PRDGROUP'
PRODPASS DC    X'08251C06253A1F362D',C'N'
PRDGROUP DC    AL4(0),AL1(8),CL8'PRDGROUP'
*
REALWTO  WTO   '1234567 101234567 201234567 301234567 401234567 5012345X
               67 60',MF=L
REALWTOL EQU   *-REALWTO           LENGTH
*
WTOMSG1  DC    CL60'RAKF0001 USERID TABLE INVALID OR MISSING'
WTOMSG2  DC    C'RAKF0002 STC ACCESS ALLOWED: USER:'
WTOMSG2U EQU   *-WTOMSG2,8
         DC    CL8' ',CL(60-(*-WTOMSG2))' '
WTOMSG3  DC    C'RAKF0003 RESOURCE TABLE INVALID/MISSING: ALLOWED:'
*        DC    C': USER ALLOWED:'
WTOMSG3U EQU   *-WTOMSG3,8
         DC    CL8' ',CL(60-(*-WTOMSG3))' '
WTOMSG4  DC    C'RAKF0004 INVALID ATTEMPT TO ACCESS SYSTEM:  USER:'
WTOMSG4U EQU   *-WTOMSG4,8
         DC    CL8' ',CL(60-(*-WTOMSG4))' '
WTOMSG5  DC    CL60'RAKF0005 INVALID ATTEMPT TO ACCESS RESOURCE'
WTOMSG7  DC    C'RAKF0007 ACCESS ALLOWED VIA OPERATIONS:  USER:'
WTOMSG7U EQU   *-WTOMSG7,8
         DC    CL8' ',CL(60-(*-WTOMSG7))' '
WTOMSG8  DC    CL60'RAKF0008 UNDEFINED RESOURCE - ACCESS ALLOWED'
WTOMSGE  DC    C'XXXXXXXXX '
WTOMSGEU EQU   *-WTOMSGE,8
         DC    CL8' ',C','
WTOMSGEJ EQU   *-WTOMSGE,8
         DC    CL8' ',C','
WTOMSGEC EQU   *-WTOMSGE,8
         DC    CL8' ',C','
WTOMSGEE EQU   *-WTOMSGE,20
         DC    CL20' ',CL(60-(*-WTOMSGE))' '
         DC    CL133' '
         DC    C'                                              '
         DC    C'                                              '
         DC    C'                                              '
         DC    C'         0123456789ABCDEF'
         TITLE 'REGISTERS AND SUCH'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
ENTYREG  EQU   6
ACEEREG  EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         PRINT NOGEN
         TITLE 'DSECTS AND SUCH'
WORKAREA DSECT                     150 BYTE AREA
WORKSAVE DS    18F                 SAVE AREA
WORKWTO  DS    XL(REALWTOL)        FOR WTO
WORKKEY  DS    X                   RACINIT KEY SAVE
WORKENTY DS    X                   ENTITY RETURN
WORKFLAG DS    X                   FLAG BYTES
WORKSUPO EQU   X'80'                  WE SET SUPERVISOR STATE
WORKNLOG EQU   X'40'                  NO LOG IF FAILURE
WORKOPRB EQU   X'20'                  RPE MATCH ON USERID/CLASS
WORKPASS DS    XL9                 RACINIT LEN/PSWD
         ORG   WORKPASS
WORKCLAS DS    XL8                 RACHECK/DEF/FRAC CLASS
WORKAUTH DS    X                   RACHECK/DEF/FRAC AUTHORITY REQ.
         ORG
         DS    XL(150-(*-WORKAREA)) MAKE SURE
WORKAREL EQU   *-WORKAREA           S.B 150
*
AUTHDS   DSECT                     USED FOR RETURN FROM SUBS(R10)
AUTHGOOD DS    F'0'
AUTHWARN DS    F'0'
AUTHFAIL DS    F'0'
*
         COPY  CJYUCBLK            USERID CBLK
*
         COPY  CJYPCBLK            PROFILE CBLK
*
         COPY  CJYRCVTD            RCVT CBLK
*
         CVT     DSECT=YES,LIST=NO
         ICHACHKL
         ICHPRCVT
         ICHRDDFL
         ICHSAFP
         IEFAJCTB
         IEZJSCB
         IHAASCB DSECT=YES
         IHAASXB DSECT=YES
         IHACDE
         IHAPSA  DSECT=YES
         IKJRB   DSECT=YES
         IKJTCB  DSECT=YES,LIST=NO
         IHAACEE
ACEEL    EQU   *-ACEE
         END
./ ADD NAME=IGC0013A 0200-90250-11093-0000-00091-00048-00091-*RAKF*
         TITLE 'ESG-SECURITY  SVC 131'
* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013A
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
         EJECT
RAKF013A CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         USING RAKF013A,R6         SVC ENTRY R6 = EP.
         LR    R9,R1               SAVE ENTRY REG.
         LR    R8,R14              SAVE RETURN REG.
         GETMAIN RC,LV=GMLEN       GET STORAGE
         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR
         USING WORKAREA,R13        SET UP DATA DSECT ADDR.
         MVC   RACRGM,RACRREAL     MOVE RACROUTE
*
         L     R15,PSATOLD-PSA(0)  ADDRESS TCB
         L     R15,TCBRBP-TCB(R15) ADDRESS RB
         XR    R14,R14             CLEAR R14
         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB
*
         LR    R10,R9              SAVE ENTRY REG.
         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.
         MVC   RACRGM+RACRLEN-RACILEN(RACILEN),0(R10) MOVE PARM
         NC    RACRGM+RACRLEN-RACILEN+4(52),=13X'00FFFFFF'
STRTSAFR LA    R5,SAFWORK          FOR SAF
         RACROUTE REQUEST=VERIFY,WORKA=(R5),MF=(E,RACRGM)
         L     R3,RACRGM           RACINIT RETURN CODE
         L     R4,RACRGM+4         RACINIT REASON CODE
*
RTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)
         LR    R15,R3              RETURN CODE
         LR    R0,R4               REASON CODE
         LR    R1,R9               RETURN R1
         BR    R8                  RETURN TO ORIG. R14
         LTORG
*
RACRREAL RACROUTE REQUEST=VERIFY,MF=L
RACRLEN  EQU   *-RACRREAL
RACINIT  RACINIT MF=L              THIS IS JUST FOR THE LENGTH
RACILEN  EQU   *-RACINIT
*
WORKAREA DSECT
SAVEAREA DS     18F
SAFWORK  DS     XL512
RACRGM   DS     XL(RACRLEN)
GMLEN    EQU    *-WORKAREA
         PRINT  NOGEN
         YREGS
         CVT     DSECT=YES,LIST=NO
         IHAPSA  DSECT=YES
         IKJRB   DSECT=YES
         IKJTCB  DSECT=YES,LIST=NO
         END
./ ADD NAME=IGC0013C 0200-90250-11093-0000-00089-00048-00089-*RAKF*
         TITLE 'ESG-SECURITY  SVC 133'
* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013C
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
         EJECT
RAKF013C CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         USING RAKF013C,R6         SVC ENTRY R6 = EP.
         LR    R9,R1               SAVE ENTRY REG.
         LR    R8,R14              SAVE RETURN REG.
         GETMAIN RC,LV=GMLEN       GET STORAGE
         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR
         USING WORKAREA,R13        SET UP DATA DSECT ADDR.
         MVC   RACRGM,RACRREAL     move RACROUTE
*
         L     R15,PSATOLD-PSA(0)  ADDRESS TCB
         L     R15,TCBRBP-TCB(R15) ADDRESS RB
         XR    R14,R14             CLEAR R14
         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB
*
         LR    R10,R9              SAVE ENTRY REG.
         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.
         MVC   RACRGM+RACRLEN-RACDLEN(RACDLEN-8),0(R10) MOVE PARM
         NC    RACRGM+RACRLEN-RACDLEN+8(28),=7X'00FFFFFF'
         NC    RACRGM+RACRLEN-RACDLEN+40(8),=7X'00FFFFFF'
*
STRTSAFR LA    R5,SAFWORK          FOR SAF
         RACROUTE REQUEST=DEFINE,WORKA=(R5),MF=(E,RACRGM)
         L     R3,RACRGM           RACDEF RETURN CODE
         L     R4,RACRGM+4         RACDEF REASON CODE
*
RTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)
         LR    R15,R3              RETURN CODE
         LR    R0,R4               REASON CODE
         LR    R1,R9               RETURN R1
         BR    R8                  RETURN TO ORIG. R14
         LTORG
RACRREAL RACROUTE REQUEST=DEFINE,MF=L
RACRLEN  EQU   *-RACRREAL
RACDEF   RACDEF MF=L               THIS IS JUST FOR THE LENGTH
         DC    A(0)       INSTALLATION DATA ADDRESS (missing in RACDEF)
         DC    A(0)       ENTITY NAME ADDR FIELD    (missing in RACDEF)
RACDLEN  EQU   *-RACDEF
*
WORKAREA DSECT
SAVEAREA DS     18F
SAFWORK  DS     XL512
RACRGM   DS     XL(RACRLEN)
GMLEN    EQU    *-WORKAREA
         PRINT  NOGEN
         YREGS
         CVT     DSECT=YES,LIST=NO
         IHAPSA  DSECT=YES
         IKJRB   DSECT=YES
         IKJTCB  DSECT=YES,LIST=NO
         END
./ ADD NAME=IGC00130 0200-90250-11093-0000-00092-00048-00092-*RAKF*
         TITLE 'ESG-SECURITY  SVC 130'
* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF0130
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
         EJECT
RAKF0130 CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         USING RAKF0130,R6         SVC ENTRY R6 = EP.
         LR    R9,R1               SAVE ENTRY REG.
         LR    R8,R14              SAVE RETURN REG.
         GETMAIN RC,LV=GMLEN       GET STORAGE
         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR
         USING WORKAREA,R13        SET UP DATA DSECT ADDR.
         MVC   RACRGM,RACRREAL     MOVE RACROUTE
*
         L     R15,PSATOLD-PSA(0)  ADDRESS TCB
         L     R15,TCBRBP-TCB(R15) ADDRESS RB
         XR    R14,R14             CLEAR R14
         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB
*
         LR    R10,R9              SAVE ENTRY REG.
         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.
         MVC   RACRGM+RACRLEN-RACCLEN(RACCLEN),0(R10) MOVE PARM
         NC    RACRGM+RACRLEN-RACCLEN+16(40),=10X'00FFFFFF'
STRTSAFR LA    R5,SAFWORK          FOR SAF
         RACROUTE REQUEST=AUTH,WORKA=(R5),MF=(E,RACRGM)
         L     R3,RACRGM           RACHECK RETURN CODE
         L     R4,RACRGM+4         RACHECK REASON CODE
*
RTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)
         LR    R15,R3              RETURN CODE
         LR    R0,R4               REASON CODE
         LR    R1,R9               RETURN R1
         USING ACHKLIST,R9         RACHECK parameter list
         TM    ACHKFLG1,ACHKCSA    profile to be returned in CSA?
         BNO   RETURN              no  --> exit
         XR    R1,R1               yes --> return zero address to
*                                          signal unsupported function
RETURN   BR    R8                  RETURN TO ORIG. R14
         LTORG
RACRREAL RACROUTE REQUEST=AUTH,MF=L
RACRLEN  EQU   *-RACRREAL
RACHECK  RACHECK MF=L              THIS IS JUST FOR THE LENGTH
RACCLEN  EQU   *-RACHECK
*
WORKAREA DSECT
SAVEAREA DS     18F
SAFWORK  DS     XL512
RACRGM   DS     XL(RACRLEN)
GMLEN    EQU    *-WORKAREA
         PRINT  NOGEN
         YREGS
         CVT     DSECT=YES,LIST=NO
         IHAPSA  DSECT=YES
         IKJRB   DSECT=YES
         IKJTCB  DSECT=YES,LIST=NO
         ICHACHKL
         END
./ ADD NAME=RAKFPROF 0200-90289-11093-0000-00267-00242-00267-*RAKF*
         TITLE 'ESG-SECURITY DATA PROFILE PROCESSOR'
* CPARM='XREF(SHORT),OBJ,NODECK',LPARM='AC=1'                 CJYRPROF
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR
         EJECT
         MACRO
&LABEL   BASMAC &R1,&S2
&LABEL.  DC    0XL4'00',X'4D',AL.4(&R1.,0),S(&S2.)
         MEND
CJYRPROF CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         SAVE  (14,12),,CJYRPROF_&SYSDATE._&SYSTIME._
         LR    R12,R15                 SETUP BASE REG.
         USING CJYRPROF,R12            ESTABLISH ADDRESSABILITY
         LA    R11,SAVEAREA            OUR SAVEAREA
         ST    R13,SAVEAREA+4          SAVE HIGH SAVEAREA
         ST    R11,8(R13)              SAVE LOW SAVEAREA
         LR    R13,R11                 POINT TO OUR SAVEAREA
         L     R8,FLCCVT-PSA(R0)       GET CVT POINTER
         ICM   R8,B'1111',CVTRAC-CVTMAP(R8) IS RCVT POINTER ZERO?
         BZ    NOGOOD                       YES, ABEND
         ICM   R8,B'1111',RCVTISTL-RCVT(R8) IS POINTER TO OUR AREA 0?
         BZ    NOGOOD                       YES, ABEND
*
         USING CJYRCVTD,R8
OK2GO    DS    0H                      NO, CONTINUE
         ENQ   (SECURITY,PROFS,E,,SYSTEM),RET=HAVE
         OPEN  (CJYPDATA,(INPUT))      OPEN INPUT FILE
         MODESET MODE=SUP,KEY=ZERO     authorize ourselves
*
READLOOP DS    0H
         MVC   INRECOLD,INRECNEW       SAVE OLD I/P FOR COMPARE
         GET   CJYPDATA,INRECNEW
         CLC   INRECNEW(ACCAUTH-INREC),INRECOLD  NEXT REC. > PREV?
         BNH   OUTOFORD                          NO, NOT SORTED
         CLC   INRECNEW(GROUPID-INREC),INRECOLD  SAME CLASS/ENTITY?
         BE    PERMBLD                 YES, BUILD PERMIT RECORD
         CLC   =CL8' ',GROUPID         IS THIS A UNIVERSAL RECORD?
         BNE   NOUAR                   NO, A PERMIT WITHOUT UAR - ABEND
         GETMAIN RU,LV=RPEL,SP=241
         LR    R10,R1                  ESTABLISH ADDRESSABILITY
         USING RPECBLK,R10               TO RPE
         XC    RPECBLK(RPEL),RPECBLK   INITIALIZE TO BINARY ZEROES
         MVC   RPENEXT,LASTRPE         POINT TO PREVIOUS RPE
         ST    R10,LASTRPE             SAVE -> THIS RPE
         LA    R11,RPEACCPT            SET PERMIT ANCHOR
         LA    R1,L'RPECLASN           DEFAULT LENGTH IF NOTFOUND
         TRT   CLASS,TRTTEST           SEARCH CLASS - BLANKS FOUND?
         BZ    NOBLANKS                NO, LENGTH ALREADY IN R1
         S     R1,=A(CLASS)            CALCULATE LENGTH OF DATA
NOBLANKS DS    0H
         STC   R1,RPECLASL             SAVE LENGTH
         MVC   RPECLASN,CLASS            AND CLASS NAME
         XR    R2,R2                   CLEAR R2 FOR NOTFOUND
         LA    R4,38                   PRESET LENGTH FOR FACILITY
         CLC   =CL8'FACILITY',RPECLASN IS IT FACILITY?
         BE    TESTENT                 YES, TRT
         LA    R4,5                    PRESET LENGTH FOR DASDVOL
         CLC   =CL8'DASDVOL',RPECLASN  IS IT DASDVOL?
         BE    TESTENT                 YES, TRT
         LA    R4,5                    PRESET LENGTH FOR TAPEVOL
         CLC   =CL8'TAPEVOL',RPECLASN  IS IT TAPEVOL?
         BE    TESTENT                 YES, TRT
         LA    R4,43                   PRESET LENGTH FOR DATASET
         CLC   =CL8'DATASET',RPECLASN  IS IT DATASET?
         BE    TESTENT                 YES, TRT
         LA    R4,7                    DEFAULT LENGTH IF NOTFOUND
TESTENT  DS    0H
         LA    R1,1(R4)                DEFAULT LENGTH FOR SUBTRACTION
         EX    R4,TRT                  EXECUTE THE TRT
         B     CONT
TRT      TRT   ENTITY(*-*),TRTTEST     SEARCH ENTITY FOR BLANK/*
CONT     DS    0H
         B     BRANCTBL(R2)            AND WE FOUND...
BRANCTBL DS    0H
         B     NOTFND                  ... NO BLANKS/NO ASTERISKS
         B     ASTRKFND                ... AN ASTERISK
         B     BLANKFND                ... A BLANK
BLANKFND DS    0H
         LA    R1,1(R1)                ADD 1 TO INCLUDE BLANK IN LENGTH
ASTRKFND DS    0H
         S     R1,=A(ENTITY)           CALCULATE LENGTH
NOTFND   DS    0H                      IF NOTFOUND LENGTH ALREADY IN R1
         STC   R1,RPEENTYL             SAVE LENGTH
         MVC   RPEENTYN,ENTITY           AND ENTITY NAME
*
         CLC   =CL8' ',ACCAUTH         IS THERE AN ACCESS AUTHORITY?
         BE    NOACCAUT                NO, BLANK ACCESS AUTH. - ABEND
*
         LA    R1,PATTERN              BEGINNING OF TABLE
         LA    R2,ROWLEN               LENGTH OF A ROW IN THE TABLE
         LA    R3,PATTERN+PATTERNL-1   LAST BYTE OF TABLE
AUTHLP1  DS    0H
         CLC   ACCAUTH,0(R1)           MATCH ON ACCESS AUTHORITY?
         BE    MATCH1                  YES, MOVE IT IN
         BXLE  R1,R2,AUTHLP1           CHECK NEXT
MATCH1   MVC   RPEUACC,8(R1)           MOVE IN BIT PATTERN
         B     READLOOP                SEE IF ANY MORE I/P RECORDS
PERMBLD  DS    0H
         CLC   =CL8' ',GROUPID         IS THERE A GROUP/USERID?
         BE    PERMINVL                NO, INVALID PERMIT RECORD- ABEND
*
         CLC   =CL8' ',ACCAUTH         IS THERE AN ACCESS AUTHORITY?
         BE    NOACCAUT                NO, BLANK ACCESS AUTH. - ABEND
*
         GETMAIN RU,LV=RPEACCLN,SP=241
         LR    R9,R1                   ESTABLISH ADDRESSABILITY
         USING RPEACCLE,R9               TO ACCESS RECORD
         XC    RPEACCLE(RPEACCLN),RPEACCLE INITIALIZE TO B'0'
         ST    R9,0(R11)               ESTABLISH POINTER TO HERE
         MVC   RPEAUSR,GROUPID         SAVE GROUP/USERID OF PERMIT
*
         LA    R1,PATTERN              BEGINNING OF TABLE
         LA    R2,ROWLEN               LENGTH OF A ROW IN THE TABLE
         LA    R3,PATTERN+PATTERNL-1   LAST BYTE OF TABLE
AUTHLP2  DS    0H
         CLC   ACCAUTH,0(R1)           MATCH ON ACCESS AUTHORITY?
         BE    MATCH2                  YES, MOVE IT IN
         BXLE  R1,R2,AUTHLP2           CHECK NEXT
MATCH2   MVC   RPEACS,8(R1)            MOVE IN BIT PATTERN
         LA    R11,RPEANEXT            PROVIDE ANCHOR FOR NEXT PERMIT
         B     READLOOP                SEE IF ANY MORE I/P RECORDS
*
EOFILE   DS    0H
         OC    LASTRPE,LASTRPE         WERE THERE ANY RECORDS I/P?
         BZ    NOREC                   NO, ABEND
         L     R11,CJYPROFS            SAVE ADDRESS OF OLD CHAIN
         MVC   CJYPROFS,LASTRPE        ACTIVATE NEW CHAIN
         DROP  R8
         BASMAC R14,MORERPE            START TO FREE RPE'S
*
         DEQ   (SECURITY,PROFS,,SYSTEM)    RELEASE ENQ
         MODESET MODE=PROB,KEY=NZERO   return to problem state
         CLOSE (CJYPDATA)              CLOSE I/P DATASET
         WTO   'RAKFPROF7  RAKF PROFILES UPDATED'
         L     R13,4(R13)              RESTORE HSA
         RETURN (14,12),,RC=0          END O.K.
FREERPE  DS    0H
         L     R8,RPEACCPT             GET ACCESS LIST POINTER
         B     MOREACC                 SEE IF ANY PERMITS
FREEACC  DS    0H
         L     R8,RPEANEXT             GET -> NEXT ACC
         FREEMAIN RU,LV=RPEACCLN,A=(R9),SP=241    FREE CURRENT RPE
MOREACC  DS    0H
         LTR   R9,R8                   ANY MORE PERMITS?
         BNZ   FREEACC                 YES, DELETE THEM
*
         L     R11,RPENEXT             GET -> NEXT RPE
         FREEMAIN RU,LV=RPEL,A=(R10),SP=241   FREE CURRENT RPE
MORERPE  DS    0H
         LTR   R10,R11                 ANYMORE RPE'S?
         BNZ   FREERPE                 YES, FREE THEM
         BR    R14                     RETURN TO END RUN
*
NOGOOD   DS    0H
         WTO   'RAKFPROF1  RCVT NOT PROPERLY INITIALIZED'
         WTO   'RAKFPROF1  **  PROGRAM TERMINATED  **'
         ABEND 100,,STEP
*
NOREC    DS    0H
         WTO   'RAKFPROF2  NO RECORDS INPUT FROM CJYPDATA'
         WTO   'RAKFPROF2  **  PROGRAM TERMINATED  **'
         ABEND 200,,STEP
*
OUTOFORD DS    0H
         L     R11,LASTRPE             SETUP FOR RPE CLEANUP
         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE
         BASMAC R14,BADMSG             WRITE BADMSG
         WTO   'RAKFPROF3  I/P RECORDS OUT OF ORDER'
         WTO   'RAKFPROF3  **  PROGRAM TERMINATED  **'
         ABEND 300,,STEP
*
NOUAR    DS    0H
         L     R11,LASTRPE             SETUP FOR RPE CLEANUP
         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE
         BASMAC R14,BADMSG             WRITE BADMSG
         WTO   'RAKFPROF4  PERMIT RECORD WITHOUT UNIVERSAL ACCESS RECOR*
               D'
         WTO   'RAKFPROF4  **  PROGRAM TERMINATED  **'
         ABEND 400,,STEP
*
PERMINVL DS    0H
         L     R11,LASTRPE             SETUP FOR RPE CLEANUP
         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE
         BASMAC R14,BADMSG             WRITE BADMSG
         WTO   'RAKFPROF5  PERMIT RECORD WITHOUT GROUPID/USERID'
         WTO   'RAKFPROF5  **  PROGRAM TERMINATED  **'
         ABEND 500,,STEP
*
NOACCAUT DS    0H
         L     R11,LASTRPE             SETUP FOR RPE CLEANUP
         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE
         BASMAC R14,BADMSG             WRITE BADMSG
         WTO   'RAKFPROF6  ENTITY RECORD WITH NO ACCESS AUTHORITY'
         WTO   'RAKFPROF6  **  PROGRAM TERMINATED  **'
         ABEND 500,,STEP
*
BADMSG   DS    0H
         MVC   BADMSGN+18(80),INRECNEW
BADMSGN  WTO   'RAKFPROF8                                              X
                                                  '
         BR    R14
**********************
         PRINT NOGEN
SAVEAREA DS    18F
LASTRPE  DC    F'0'
LASTACC  DC    F'0'
SECURITY DC    CL8'CJYRCVT'
PROFS    DC    CL8'CJYPROFS'
INREC    DS    0CL80
INRECNEW DS    0CL80
CLASS    DC    XL8'00'
ENTITY   DC    XL44'00'
GROUPID  DC    XL8'00'
ACCAUTH  DC    XL8'00'
         DC    XL(80-(*-INREC))'00'
INRECOLD DC    XL80'00'
PATTERN  EQU   *
         DC    CL8'ALTER   ',AL1(RACFALTR)
ROWLEN   EQU   *-PATTERN
         DC    CL8'CONTROL ',AL1(RACFCNTL)
         DC    CL8'UPDATE  ',AL1(RACFUPDT)
         DC    CL8'READ    ',AL1(RACFREAD)
         DC    CL8'EXEC    ',AL1(RACFEXEC)
         DC    CL8'NONE    ',AL1(RACFNONE)
PATTERNL EQU   *-PATTERN
TRTTEST  DC    XL256'00'               TABLE TO FIND BLANK/ASTERISK
         ORG   TRTTEST+C' '            SETUP FLAG FOR BLANK
         DC    X'08'
         ORG   TRTTEST+C'*'            SETUP FLAG FOR ASTERISK
         DC    X'04'
         ORG
CJYPDATA DCB   MACRF=GM,EODAD=EOFILE,DDNAME=RAKFPROF,DSORG=PS
         COPY  CJYRCVTD
         COPY  CJYPCBLK
         IHAPSA DSECT=YES
         CVT    DSECT=YES
         ICHPRCVT
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   CJYRPROF
./ ADD NAME=RAKFPWUP 0200-11093-11093-0000-00023-00023-00000-*RAKF*
         TITLE 'RAKF Password Update Program'
RAKFPWUP CSECT
*
**********************************************************************
*                                                                    *
* NAME: RAKFPWUP                                                     *
*                                                                    *
* TYPE: Assembler Source                                             *
*                                                                    *
* DESC: Process Password Update Requests                             *
*                                                                    *
* FUNCTION: - retrieve username and new password from SQA            *
*           - clear and free SQA                                     *
*           - append username and new password to update queue       *
*                                                                    *
* NOTE: Yet to be implemented!                                       *
*                                                                    *
**********************************************************************
*
         PRINT NOGEN
         XR    15,15
         BR    14
         END   RAKFPWUP
./ ADD NAME=RAKFUSER 0200-90299-11093-0000-00211-00160-00122-*RAKF*
         TITLE 'ESG-SECURITY USERID TABLE LOADER'
* CPARM='XREF(SHORT)',LPARM='AC=1'                            CJYRUIDS
*      DD DSN=SYS1.MACLIB,DISP=SHR
*      DD DSN=SYS1.MODGEN,DISP=SHR
*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR
         EJECT
CJYRUIDS CSECT
*
**********************************************************************
*                                                                    *
*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *
*                                                                    *
*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *
*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *
*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *
*                                                                    *
*                                  CRAIG J. YASUNA, PRESIDENT        *
*                                  ENTERPRISE SYSTEMS GROUP          *
*                                  2 MARC COURT                      *
*                                  EDISON, NEW JERSEY 08820          *
*                                                                    *
**********************************************************************
*
         SAVE   (14,12),,CJYRUIDS_&SYSDATE._&SYSTIME
         LR     R12,R15             USE ENTRY AS BASE
         USING  CJYRUIDS,R12        " " "
         ST     R13,SAVEAREA+4      SAVE CALLER'S SAVE AREA ADDR
         LA     R2,SAVEAREA         OUR SAVEAREA
         ST     R2,8(R13)           SAVE OUR AREA
         LR     R13,R2              LOAD REGISTER 13 WITH SAVEAREA
*
         L      R8,FLCCVT-PSA(0)    GET CVT ADDR
         ICM    R8,B'1111',CVTRAC-CVTMAP(R8) GET RCVT ADDR, IS IT 0?
         BZ     ABEND100             Y - CJYRCVT FAILED, GO TO ABEND
         ICM    R8,B'1111',RCVTISTL-RCVT(R8) GET OUR POINTER, IS IT 0?
         BZ     ABEND100             YES, ABEND
         ENQ    (SECURITY,USERS,E,,SYSTEM)
         OPEN   (CJYUDATA,(INPUT))  OPEN INPUT FILE
         MODESET MODE=SUP,KEY=ZERO  authorize ourselves
*
READLOOP GET    CJYUDATA,RECORD     GET RECORD
         CLC    USERID,OLDUSER      IS INPUT IN SORT SEQUENCE?
         BE     NEWGROUP               OK ---
         CLI    USERID,C' '         UID?
         BE     ABEND2               NO ---
         CLI    PASSWORD,C' '       PSWD?
         BE     ABEND2               NO ---
         CLI    GROUP,C' '          GROUP.
         BE     ABEND2               NO ---
         CLI    OPERFLAG,C'Y'       FLAG ??
         BE     RECOK                RECORD OK
         CLI    OPERFLAG,C'N'       FLAG ??
         BNE    ABEND2               TOUGH
*
RECOK    MVC    OLDREC,RECORD       REFRESH LAST USER ID READ
         GETMAIN RU,LV=CBLKL,SP=241 GET AREA IN CSA
         LR     R5,R1               GM AREA ADDR TO WORK REG.
         USING  CBLK,R5             HELLO BALL ---
         XC     CBLK(CBLKL),CBLK    CLEAR TO B'0'
         MVC    CBLKNEXT,LASTGM     GET PREV GETMAINED ADDR.
         ST     R5,LASTGM           SAVE ADDR OF GM AREA.
         LA     R7,CBLKGRPS        POINTER FOR GROUP
*
         LA     R1,8               MAX
         TRT    USERID,TRTBLANK    FIND BLANK
         BZ     MOVEUID            GO MOVE USERID
         S      R1,=A(USERID)      SUBTRACT BEGINNING
MOVEUID  STC    R1,CBLKUSRL        SAVE LENGTH
         MVC    CBLKUSRI,USERID    MOVE USERID
*
         LA     R1,8               MAX
         TRT    GROUP,TRTBLANK     FIND BLANK
         BZ     MOVEGRP            GO MOVE GROUP
         S      R1,=A(GROUP)       SUBTRACT BEGINNING
MOVEGRP  STC    R1,CBLKGRPL        SAVE LENGTH
         MVC    CBLKGRPN,GROUP     MOVE GROUP
*
         LA     R1,8               MAX
         TRT    PASSWORD,TRTBLANK  FIND BLANK
         BZ     MOVEPSW            GO MOVE PASSWORD
         S      R1,=A(PASSWORD)    SUBTRACT BEGINNING
MOVEPSW  STC    R1,CBLKPWDL        SAVE LENGTH
         MVC    CBLKPWDE,PASSWORD  MOVE USERID
         BCTR   R1,0               LENGTH OF PSWD - 1 FOR EX.
         EX     R1,SCRAMBLE        SCRABLE PSWD
         MVC    CBLKFLG1,OPERFLAG  MOVE OPER FLAG TO ENTRY.
*
         B      ADDGROUP           ADD CONNECTS
*
SCRAMBLE XC     CBLKPWDE(0),=C'SECURITY'  SCRAMBLE PSWD
*
NEWGROUP CLC    GROUP,OLDGROUP      IS INPUT IN SORT SEQUENCE?
         BNH    ABEND2                 N - TELL ABOUT IT
         MVC    OLDREC,RECORD       REFRESH LAST USER ID READ
ADDGROUP GETMAIN RU,LV=CONNL,SP=241 GET AREA IN CSA
         LR     R6,R1              GM AREA ADDR TO WORK REG.
         USING  CONNGRUP,R6        HELLO BALL ---
         XC     CONNGRUP(CONNL),CONNGRUP CLEAR AREA
         ST     R6,0(R7)           SAVE IN LAST POINTER
         LA     R7,CONNNEXT        SAVE FOR NEXT TIME
*
         LA     R1,8               MAX
         TRT    GROUP,TRTBLANK     FIND BLANK
         BZ     MOVECONN           GO MOVE GROUP
         S      R1,=A(GROUP)       SUBTRACT BEGINNING
MOVECONN STC    R1,CONNGRPL        SAVE LENGTH
         MVC    CONNGRPN,GROUP     MOVE GROUP
*
         CLI    DFLTGRPF,C'*'      DEFAULT FLAG SET?
         BNE    READLOOP           NO, DON'T MOVE
         STC    R1,CBLKGRPL        SAVE LENGTH
         MVC    CBLKGRPN,GROUP     MOVE GROUP
         B      READLOOP           READ NEXT RECORD.
*
ENDDATA  OC     OLDUSER,OLDUSER    EMPTY INPUT FILE?
         BZ     ABEND300              Y - TELL ABOUT IT AND TERMINATE.
         L      R4,CJYUSERS-CJYRCVTD(R8)       GET OLD TABLE PTR
         MVC    CJYUSERS-CJYRCVTD(,R8),LASTGM  UPDATE PTR TO NEW TABLE
         B      ANYMORE                        GO CHK FOR ANY ENTRIES.
*                                      N - FALL THROUGH
FREELOOP L      R4,CBLKNEXT        LOOP THRU OLD TABLE
         L      R7,CBLKGRPS-CBLK(R5)  GROUP LOOP
         B      FREECON2
FREECONN L      R7,CONNNEXT        LOOP THRU OLD TABLE
         FREEMAIN RU,LV=CONNL,A=(R6),SP=241 FREE CURRENT ENTRY.
FREECON2 LTR    R6,R7              MORE ENTRIES?
         BNZ    FREECONN               Y - NEXT ENTRY
         FREEMAIN RU,LV=CBLKL,A=(R5),SP=241 FREE CURRENT ENTRY.
ANYMORE  LTR    R5,R4              MORE ENTRIES?
         BNZ    FREELOOP               Y - NEXT ENTRY
*
         TM     TERMFLAG,TERMABND  WAS AN ABEND REQUESTED?
         BO     ABEND200               Y-ABEND
BYEBYE   MODESET MODE=PROB,KEY=NZERO   return to problem state
         CLOSE (CJYUDATA)              close input dataset
         WTO    'RAKFUIDS4  USER TABLE UPDATED'
         L      R13,SAVEAREA+4     LOAD CALLER'S SAVE AREA ADDR
         RETURN (14,12),RC=0
*
ABEND100 WTO    'RAKFUIDS1  RCVT NOT PROPERLY INITIALIZED',DESC=(2)
         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)
         ABEND  100,,STEP
*
ABEND2   WTO    'RAKFUIDS2  INPUT DATA INVALID OR OUT OF SEQ.',DESC=(2)
         MVC    PASSWORD,=C'********'
         MVC    BADMSG+8(80),RECORD
BADMSG   WTO    '                                                      X
                                           ',DESC=(2)
         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)
         OI     TERMFLAG,TERMABND          SET TO ABEND @ TERMINATION
         LR     R4,R5                      GET LAST GM AREA ADDR AND
         B      ANYMORE                    GO CLEAN THE GM CHAIN.
*
ABEND200 ABEND  200,,STEP              Y - ABEND !
*
ABEND300 WTO    'RAKFUIDS3  EMPTY INPUT FILE ?!?!',DESC=(2)
         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)
         ABEND  300,,STEP
*
TRTBLANK DC     XL256'00'          TABLE FOR TRT
         ORG    TRTBLANK+C' '      BLANK
         DC     X'04'
         ORG
*
         PRINT  NOGEN
CJYUDATA DCB    DDNAME=RAKFUSER,MACRF=GM,EODAD=ENDDATA,DSORG=PS
*
SAVEAREA DS     18F
LASTGM   DC     F'0'
SECURITY DC     CL8'CJYRCVT'
USERS    DC     CL8'CJYUSRS'
TERMFLAG DC     X'00'
TERMABND EQU    X'01'
RECORD   DS     0XL80
USERID   DS     CL8
DFLTGRPF DS     X                  DEFAULT GROUP FLAG
GROUP    DS     CL8
         DS     X
PASSWORD DS     CL8
         DS     X
*
OPERFLAG DS     X
         DS     XL(80-(*-RECORD))
OLDREC   DS     0XL80
OLDUSER  DS     CL8
         DS     X
OLDGROUP DS     CL8
         DS     XL(80-(*-OLDREC))
*
R0       EQU    00
R1       EQU    01
R2       EQU    02
R3       EQU    03
R4       EQU    04
R5       EQU    05
R6       EQU    06
R7       EQU    07
R8       EQU    08
R9       EQU    09
R10      EQU    10
R11      EQU    11
R12      EQU    12
R13      EQU    13
R14      EQU    14
R15      EQU    15
*
         COPY    CJYRCVTD
         COPY    CJYUCBLK
         ICHPRCVT
         CVT     DSECT=YES
         IHAPSA  DSECT=YES
*
         END
